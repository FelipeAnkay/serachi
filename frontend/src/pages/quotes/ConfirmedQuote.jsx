import Cookies from 'js-cookie';
import { AnimatePresence, motion } from 'framer-motion';
import { useState, useEffect, useRef } from 'react';
import { useQuoteServices } from '../../store/quoteServices';
import { useNavigate, useLocation } from "react-router-dom";
import { Bed, CircleX, ConeIcon, Copy, MapPinCheckInside, MapPinPlus, Trash2 } from 'lucide-react';
import { useAuthStore } from '../../store/authStore';
import { useExperienceServices } from '../../store/experienceServices';
import toast from 'react-hot-toast';
import { useServiceServices } from '../../store/serviceServices';
import { useStaffServices } from '../../store/staffServices';
import { useProductServices } from '../../store/productServices';
import { useCustomerServices } from '../../store/customerServices';
import { useRoomReservationServices } from '../../store/roomReservationServices';
import ProductSelect from '../../components/ProductSelect';
import { createCustomServices } from '../../components/createCustomService'
import { formatDateDisplay, formatDateShort, formatDateInput, formatDateISO, formatDateTimeDisplayHours } from '../../components/formatDateDisplay'
import LoadingSpinner from '../../components/LoadingSpinner';

export default function ConfirmedQuote() {
    const { getQuoteByCheckout } = useQuoteServices();
    const { createRoomReservation, getReservations } = useRoomReservationServices();
    const { getProductByStoreId } = useProductServices();
    const { createService } = useServiceServices();
    const { createExperience, updateExperience, getExperienceByCheckout } = useExperienceServices();
    const { getCustomerEmail } = useCustomerServices();
    const [quotes, setQuotes] = useState([]);
    const [loading, setLoading] = useState(false);
    const storeId = Cookies.get('storeId');
    const timezone = Cookies.get('timezone');
    const [quoteSearch, setQuoteSearch] = useState("");
    const { user } = useAuthStore();
    const [existingExperiences, setExistingExperiences] = useState([]);
    const [showOnlyUnprocessed, setShowOnlyUnprocessed] = useState(true);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [customService, setCustomService] = useState([]);
    const [customServiceList, setCustomServiceList] = useState([]);
    const { getStaffList } = useStaffServices();
    const [staffList, setStaffList] = useState([]);
    const [modalQuote, setModalQuote] = useState(null);
    const [productList, setProductList] = useState([]);
    const [quoteProductList, setQuoteProductList] = useState([]);
    const [nameAutoGenerated, setNameAutoGenerated] = useState(true);
    const [existingReservations, setExistingReservations] = useState([]);
    const [customer, setCustomer] = useState([]);

    const location = useLocation();
    const navigate = useNavigate();

    const handleCloneClick = (quoteId) => {
        Cookies.set('clone', true)
        navigate(`/new-quote/${quoteId}`);
    };

    useEffect(() => {
        //console.log("Entre a useEffect [storeId, location.key]", timezone);
        const fetchQuotes = async () => {
            setLoading(true)
            try {
                const response = await getQuoteByCheckout(storeId, true);
                //console.log("Quote Response: ", response);
                setQuotes(response.quoteList);
            } catch (error) {
                //console.error('Error fetching quotes:', error);
                toast.error("Error fetching quotes")
            } finally {
                setLoading(false);
            }
        };
        const fetchExperiences = async () => {
            try {
                setLoading(true)
                const response = await getExperienceByCheckout(storeId);
                //console.log("getExperienceList Response: ", response);
                setExistingExperiences(response.experienceList || []);
            } catch (error) {
                //console.error("Error fetching experiences:", error);
                toast.error("Error fetching experiences");
            } finally {
                setLoading(false);
            }
        };
        const fetchReservations = async () => {
            try {
                setLoading(true)
                const response = await getReservations(storeId);
                //console.log("getReservations Response: ", response);
                setExistingReservations(response.roomReservationList);
            } catch (error) {
                toast.error("Error fetching Reservations");
            } finally {
                setLoading(false)
            }

        }

        if (storeId) {
            fetchQuotes();
            fetchExperiences();
            fetchReservations();
        }
    }, [storeId, location.key]);

    useEffect(() => {
        if (location.state?.updated) {
            // Limpiar el estado para que no recargue de nuevo en otros montajes
            navigate(location.pathname, { replace: true, state: {} });
        }
    }, [location]);

    useEffect(() => {
        //console.log("El customService es: ", customService)
    }, [customService]);

    useEffect(() => {
        if (modalQuote?.customerEmail && customService.productName && nameAutoGenerated) {
            let serviceName = customService.productName + " - " + customer.name + (customer.lastName ? " " + customer.lastName : "")
            setCustomService(prev => ({
                ...prev,
                name: serviceName
            }));
        }
    }, [modalQuote?.customerEmail, customService.productName, nameAutoGenerated]);

    const fetchCustomer = async (quote) => {
        try {
            setLoading(true)
            const cust = await getCustomerEmail(quote.customerEmail, storeId);
            //console.log("El getCustomerEmail es: ", cust);
            return cust.customerList[0]
        } catch (error) {
            toast.error("Error getting Customer")
        } finally {
            setLoading(false);
        }
    }
    const handleCreateExperience = async (quote) => {
        setLoading(true)
        try {
            const serviceIds = [];
            const formDateIn = new Date(quote.dateIn).toISOString().split("T")[0];
            const formDateOut = new Date(quote.dateOut).toISOString().split("T")[0];
            const fetchedCustomer = await fetchCustomer(quote);

            for (const product of quote.productList) {
                let serviceName = product.productName + " - " + fetchedCustomer.name + (fetchedCustomer.lastName ? " " + fetchedCustomer.lastName : "")
                //console.log("serviceName: ", serviceName);
                const servicePayload = {
                    name: serviceName,
                    productId: product.productId,
                    quoteId: quote._id,
                    customerEmail: quote.customerEmail,
                    storeId: quote.storeId,
                    type: "Customer",
                    isPaid: true,
                    userEmail: quote.userEmail
                };
                //console.log("servicePayload: ", servicePayload)
                const service = await createService(servicePayload);
                //console.log("service: ", service)
                serviceIds.push(service._id);
            }

            const experience = existingExperiences.find(exp => exp.quoteId === quote._id);

            const experiencePayload = {
                name: experience
                    ? experience.name
                    : `${quote.customerEmail} - ${formDateIn} TO ${formDateOut}`,
                storeId: quote.storeId,
                userEmail: quote.userEmail,
                customerEmail: quote.customerEmail,
                dateIn: quote.dateIn,
                dateOut: quote.dateOut,
                quoteId: quote._id,
                source: quote.source,
                serviceList: [...(experience?.serviceList || []), ...serviceIds],
                bookList: experience?.bookList || [],
                _id: experience?._id,
            };
            //console.log("experiencePayload: ", experiencePayload)
            if (experience) {
                await updateExperience(experiencePayload._id, experiencePayload)
            } else {
                await createExperience(experiencePayload);
            }
            window.scrollTo({ top: 0, behavior: 'smooth' });
            toast.success("Experience & Services created");

            const expResp = await getExperienceByCheckout(storeId);
            setExistingExperiences(expResp.experienceList || []);
            navigate(`/set-service-dates`);

        } catch (error) {
            toast.error("Error creating or updating experience");
            //console.error(error);
        } finally {
            setLoading(false);
        }
    };

    const handleCreateReservation = async (quote) => {
        setLoading(true)
        try {
            const reservationIds = [];

            if (quote.roomList && quote.roomList.length > 0) {
                for (const room of quote.roomList) {
                    const reservationPayload = {
                        roomId: room.roomId,
                        quoteId: quote._id,
                        customerEmail: quote.customerEmail,
                        storeId: quote.storeId,
                        dateIn: room.roomDateIn,
                        dateOut: room.roomDateOut,
                        bedsReserved: room.Qty,
                        userEmail: quote.userEmail,
                        roomUnitaryPrice: room.roomUnitaryPrice,
                        roomFinalPrice: room.roomFinalPrice,
                    };

                    const reservation = await createRoomReservation(reservationPayload);
                    //console.log("reservation: ", reservation)
                    reservationIds.push(reservation.service._id);
                }
            }

            // Verificar si ya existe una experiencia
            let experience = existingExperiences.find(exp => exp.quoteId === quote._id);
            //console.log("experience es: ", experience)
            const formDateIn = new Date(quote.dateIn).toISOString().split("T")[0];
            const formDateOut = new Date(quote.dateOut).toISOString().split("T")[0];

            const experiencePayload = {
                name: experience
                    ? experience.name
                    : `E: ${quote.customerEmail} - ${formDateIn} TO ${formDateOut}`,
                storeId: quote.storeId,
                userEmail: quote.userEmail,
                customerEmail: quote.customerEmail,
                dateIn: quote.dateIn,
                dateOut: quote.dateOut,
                quoteId: quote._id,
                source: quote.source,
                serviceList: experience?.serviceList || [],
                bookList: reservationIds,
                _id: experience?._id, // importante para sobrescribir si ya existe
            };
            if (experience) {
                await updateExperience(experiencePayload._id, experiencePayload)
            } else {
                await createExperience(experiencePayload);
            }
            window.scrollTo({ top: 0, behavior: 'smooth' });
            toast.success("Reservations created and experience updated");

            const expResp = await getExperienceByCheckout(storeId);
            setExistingExperiences(expResp.experienceList || []);
            const resResp = await getReservations(storeId);
            setExistingReservations(resResp.roomReservationList);

        } catch (error) {
            toast.error("Error creating reservation or updating experience");
            console.error(error);
        } finally {
            setLoading(false);
        }
    };

    const handleCreateCustomExperience = async (quote, customServiceList) => {
        if (customServiceList.length === 0) {
            toast.error("At least 1 service must be created");
            return;
        }
        setLoading(true);
        try {
            const serviceIds = [];
            const formDateIn = new Date(quote.dateIn).toISOString().split("T")[0];
            const formDateOut = new Date(quote.dateOut).toISOString().split("T")[0];

            for (const auxService of customServiceList) {
                const servicePayload = {
                    name: auxService.name,
                    productId: auxService.productId,
                    quoteId: quote._id,
                    customerEmail: quote.customerEmail,
                    storeId: quote.storeId,
                    userEmail: quote.userEmail,
                    dateIn: auxService.dateIn,
                    dateOut: auxService.dateOut,
                    isPaid: true,
                    staffEmail: auxService.staffEmail
                };
                const service = await createService(servicePayload);
                serviceIds.push(service._id);
            }

            const experience = existingExperiences.find(exp => exp.quoteId === quote._id);

            const experiencePayload = {
                name: experience
                    ? experience.name
                    : `E: ${quote.customerEmail} - ${formDateIn} TO ${formDateOut}`,
                storeId: quote.storeId,
                userEmail: quote.userEmail,
                customerEmail: quote.customerEmail,
                dateIn: quote.dateIn,
                dateOut: quote.dateOut,
                quoteId: quote._id,
                source: quote.source,
                serviceList: [...(experience?.serviceList || []), ...serviceIds],
                bookList: experience?.bookList || [],
                _id: experience?._id,
            };

            if (experience) {
                await updateExperience(experiencePayload._id, experiencePayload)
            } else {
                await createExperience(experiencePayload);
            }
            window.scrollTo({ top: 0, behavior: 'smooth' });
            toast.success("Experience & Services created/updated");
            setCustomServiceList(null);
            setIsModalOpen(false);
            setModalQuote(null);

            const response = await getExperienceByCheckout(storeId);
            setExistingExperiences(response.experienceList || []);
            setLoading(false);

        } catch (error) {
            toast.error("Error creating or updating experience");
            console.error(error);
            setLoading(false);
        } finally {
            setLoading(false);
        }
    };

    const handleOpenModal = async (quote) => {
        setLoading(true)
        try {
            const response = await getStaffList(storeId);
            setStaffList(response.staffList);
            const prodResponse = await getProductByStoreId(storeId);
            setProductList(prodResponse.productList);
            setCustomer(await fetchCustomer(quote));
            setModalQuote(quote);
            setNameAutoGenerated(true);
            setIsModalOpen(true);
            window.scrollTo({ top: 0, behavior: 'smooth' });
        } catch (error) {
            toast.error('Error fetching staff');
        } finally {
            setLoading(false);
        }
    };

    const handleResetCustomService = () => {
        setCustomService({});
        setCustomServiceList([]);
    };

    const handleDeleteCustomService = (indexToDelete) => {
        setCustomServiceList(prevList => prevList.filter((_, i) => i !== indexToDelete));
    };

    return (
        <>
            {
                loading && (
                    <LoadingSpinner />
                )
            }
            <div className="flex flex-col min-h-screen w-full bg-[#18394C] text-slate-800 px-4 py-6 sm:px-8 sm:py-10">
                <motion.div
                    initial={{ opacity: 0, scale: 2 }}
                    animate={{ opacity: 1, scale: 1 }}
                    exit={{ opacity: 0, scale: 0.9 }}
                    transition={{ duration: 0.5 }}
                    className="flex flex-col w-full max-w-9/12 mx-auto bg-sky-50 backdrop-filter backdrop-blur-lg rounded-2xl shadow-2xl border border-gray-800 overflow-hidden min-h-screen"
                >
                    <h1 className="text-3xl font-bold mt-6 mb-6 text-center text-slate-800 bg-clip-text">Confirmed Quotes</h1>
                    <div>
                        <fieldset className="flex-grow space-y-4 rounded-2xl p-4 ml-4 mr-4">
                            <legend className="text-2xl font-bold">Quote List</legend>
                            <input
                                type="text"
                                placeholder="Search quote by email or name..."
                                className="w-full p-2 bg-white text-slate-900 border border-slate-300"
                                value={quoteSearch}
                                onChange={(e) => setQuoteSearch(e.target.value)}
                                onKeyDown={(e) => {
                                    if (e.key === 'Enter') {
                                        e.preventDefault();
                                        // Add logic if we want to do something when enter is pressed
                                    }
                                }}
                            />
                            <div className="flex items-center space-x-2 mb-2">
                                <label htmlFor="filterSwitch" className="text-slate-800 font-medium">Show only unprocessed quotes</label>
                                <input
                                    id="filterSwitch"
                                    type="checkbox"
                                    checked={showOnlyUnprocessed}
                                    onChange={(e) => setShowOnlyUnprocessed(e.target.checked)}
                                    className="w-5 h-5 rounded accent-blue-600"
                                />
                            </div>
                            <div className="grid gap-4 grid-cols-1 sm:grid-cols-3 md:grid-cols-2 lg:grid-cols-1">
                                {!quotes || quotes.length === 0 ? (
                                    <p>No Quotes found for this store.</p>
                                ) : (
                                    quotes
                                        .filter(quote =>
                                            quote.customerEmail.toLowerCase().includes(quoteSearch.toLowerCase()) ||
                                            quote.customerName.toLowerCase().includes(quoteSearch.toLowerCase()) &&
                                            (!showOnlyUnprocessed || !existingExperiences.some(exp => exp.quoteId === quote._id) || !existingReservations.some(res => res.quoteId === quote._id))
                                        )
                                        .map((quote) => {
                                            const alreadyExists = existingExperiences.some(
                                                exp => exp.quoteId === quote._id && Array.isArray(exp.serviceList) && exp.serviceList.length > 0
                                            );
                                            const reservationAlreadyExists = existingReservations.some(exp => exp.quoteId === quote._id);
                                            //console.log("El valor de existingExperiences:", alreadyExists," - ", existingExperiences, " - ", quote._id);
                                            return (
                                                <div
                                                    key={quote._id}
                                                    className="border rounded-lg p-4 hover:shadow transition relative bg-white border-slate-300 flex flex-col sm:flex-row sm:justify-between sm:items-center space-y-4 sm:space-y-0"
                                                >
                                                    <div>
                                                        <h3 className="text-md sm:text-lg font-semibold text-gray-800">
                                                            {(quote.customerName ? quote.customerName : quote.customerEmail)} - From: {formatDateDisplay(quote.dateIn)}
                                                            {' to ' + formatDateDisplay(quote.dateOut)}
                                                            {' - ' + quote.productList.length + ' Products '} -  ${Number(quote.finalPrice).toFixed(2)}
                                                        </h3>
                                                        <div>
                                                            {quote.roomList?.map((room) => {
                                                                <div className='flex flex-col'>
                                                                    <p>Room: {room.roomName}</p>
                                                                    <p>Check-In: {formatDateDisplay(room.roomDateIn)}</p>
                                                                    <p>Check-Out: {formatDateDisplay(room.roomDateOut)}</p>
                                                                </div>
                                                            })
                                                            }
                                                        </div>
                                                    </div>

                                                    <div className={`flex flex-col sm:flex-row gap-2 w-full ${alreadyExists ? "sm:justify-end sm:w-1/2" : "sm:w-1/2"}`}>
                                                        <motion.button
                                                            type='button'
                                                            whileHover={{ scale: 1.05 }}
                                                            whileTap={{ scale: 0.95 }}
                                                            onClick={() => handleCloneClick(quote._id)}
                                                            className={`w-full py-3 px-4 bg-[#118290] hover:bg-[#0d6c77] text-cyan-50 font-bold rounded-lg shadow-lg
                                                         focus:ring-offset-1 focus:ring-offset-cyan-900 ${alreadyExists ? "sm:w-1/4 sm:self-end" : ""}`}
                                                        >
                                                            <div className='flex flex-col justify-center items-center text-sm sm:text-base'>
                                                                <Copy />
                                                                <span>Clone Quote</span>
                                                            </div>
                                                        </motion.button>
                                                        {(quote.roomList?.length > 0 && !reservationAlreadyExists) && (
                                                            <motion.button
                                                                type='button'
                                                                whileHover={{ scale: 1.05 }}
                                                                whileTap={{ scale: 0.95 }}
                                                                onClick={() => handleCreateReservation(quote)}
                                                                className={`w-full py-3 px-4 bg-[#118290] hover:bg-[#0d6c77] text-cyan-50 font-bold rounded-lg shadow-lg
                                                         focus:ring-offset-1 focus:ring-offset-cyan-900 ${alreadyExists ? "sm:w-1/4 sm:self-end" : ""}`}
                                                            >
                                                                <div className='flex flex-col justify-center items-center text-sm sm:text-base'>
                                                                    <Bed />
                                                                    <span>Confirm Room</span>
                                                                </div>
                                                            </motion.button>
                                                        )}

                                                        {!alreadyExists && (
                                                            <>
                                                                <motion.button
                                                                    type='button'
                                                                    whileHover={{ scale: 1.05 }}
                                                                    whileTap={{ scale: 0.95 }}
                                                                    onClick={() => handleCreateExperience(quote)}
                                                                    className='w-full py-3 px-4 bg-[#118290] hover:bg-[#0d6c77] text-cyan-50 font-bold rounded-lg shadow-lg
                                                         focus:ring-offset-1 focus:ring-offset-cyan-900'
                                                                >
                                                                    <div className='flex flex-col justify-center items-center text-sm sm:text-base'>
                                                                        <MapPinCheckInside />
                                                                        <span>Create Experience</span>
                                                                    </div>
                                                                </motion.button>

                                                                <motion.button
                                                                    type='button'
                                                                    whileHover={{ scale: 1.05 }}
                                                                    whileTap={{ scale: 0.95 }}
                                                                    onClick={() => handleOpenModal(quote)}
                                                                    className='w-full py-3 px-4 bg-[#118290] hover:bg-[#0d6c77] text-cyan-50 font-bold rounded-lg shadow-lg
                                                         focus:ring-offset-1 focus:ring-offset-cyan-900'
                                                                >
                                                                    <div className='flex flex-col justify-center items-center text-sm sm:text-base'>
                                                                        <MapPinPlus />
                                                                        <span>Create Custom Experience</span>
                                                                    </div>
                                                                </motion.button>
                                                            </>
                                                        )}
                                                    </div>
                                                </div>
                                            );
                                        })

                                )}
                                <AnimatePresence className="relative">
                                    {loading && (
                                        <div className="absolute inset-0 bg-black bg-opacity-40 backdrop-blur-sm flex items-center justify-center z-50 rounded-2xl">
                                            <div className="text-slate-800 text-lg font-semibold animate-pulse">Creating...</div>
                                        </div>
                                    )}
                                    {isModalOpen && modalQuote && (
                                        <motion.div className={`relative ${loading ? 'pointer-events-none opacity-50' : ''}`}>

                                            <motion.div
                                                key="custom-experience-modal"
                                                className="fixed inset-0 bg-black/95 flex items-center justify-center z-50 "
                                                initial={{ opacity: 0 }}
                                                animate={{ opacity: 1 }}
                                                exit={{ opacity: 0 }}
                                            >
                                                <motion.div
                                                    className="bg-[#EEF9FC] rounded-2xl p-6 h-[90%] overflow-y-auto relative"
                                                    initial={{ scale: 0.8 }}
                                                    animate={{ scale: 1 }}
                                                    exit={{ scale: 0.8 }}
                                                    transition={{ duration: 0.3 }}
                                                >
                                                    <button
                                                        type="button"
                                                        className="absolute top-3 right-3 text-slate-700 hover:text-slate-800"
                                                        onClick={() => {
                                                            setIsModalOpen(false);
                                                            setModalQuote(null); // Resetear
                                                        }}
                                                    >
                                                        <CircleX />
                                                    </button>

                                                    <h2 className="text-xl font-bold mb-4 text-center text-slate-800">Custom Experience</h2>

                                                    <fieldset className='flex-1 border p-4 rounded-2xl bg-white'>
                                                        <legend className="font-semibold text-sm">Quoted Dates</legend>
                                                        <div className='flex flex-row justify-center'>
                                                            <label htmlFor="quoteDateIn" className='text-lg font-bold'>Date In: {formatDateDisplay(modalQuote.dateIn)}</label>
                                                            <label htmlFor="quoteDateOut" className='ml-2 text-lg font-bold'> | Date Out: {formatDateDisplay(modalQuote.dateOut)}</label>
                                                        </div>
                                                    </fieldset>

                                                    {/* CONTENIDO DEL MODAL (usa modalQuote en vez de quote directamente) */}
                                                    <div className="space-y-4 mt-2">
                                                        <div className='flex flex-row w-full gap-x-2'>
                                                            <fieldset className='flex-1 border p-4 rounded-2xl bg-white'>
                                                                <legend className="font-semibold text-sm">Quoted Products</legend>
                                                                <div className='flex flex-col'>
                                                                    {(modalQuote.productList || []).map((product) => (
                                                                        <label key={product._id} value={product._id}>
                                                                            {product.productName} - {product.Qty}
                                                                        </label>
                                                                    ))}
                                                                </div>
                                                            </fieldset>
                                                        </div>
                                                        <div className='flex flex-row'>
                                                            <fieldset className='border p-4 rounded-2xl mr-2 bg-white'>
                                                                <legend className="font-semibold text-sm">Service Data</legend>
                                                                {/* Product Selection */}
                                                                <div>
                                                                    <ProductSelect
                                                                        productList={productList}
                                                                        customService={customService}
                                                                        setCustomService={setCustomService}
                                                                        setNameAutoGenerated={setNameAutoGenerated}
                                                                    />
                                                                </div>
                                                                <div>
                                                                    <label className="block text-sm font-medium">Base Service Name:</label>
                                                                    <input
                                                                        type="text"
                                                                        className={`w-full border border-gray-300  ${!customService.productId ? 'bg-slate-300' : 'bg-white'} text-slate-900 rounded px-3 py-2 mt-1`}
                                                                        value={customService.name || ''}
                                                                        disabled={!customService.productId}
                                                                        onChange={(e) => {
                                                                            setNameAutoGenerated(false); // Usuario está editando manualmente
                                                                            setCustomService({ ...customService, name: e.target.value });
                                                                        }}
                                                                    />
                                                                </div>


                                                                {/* Staff Selection */}
                                                                <div className='mt-2'>
                                                                    <label className="block text-sm font-medium">Staff Email:</label>
                                                                    <select
                                                                        className="w-full border border-gray-300 bg-white text-slate-900 rounded px-3 py-2 mt-1"
                                                                        value={customService.staffEmail || ''}
                                                                        onChange={(e) => setCustomService({ ...customService, staffEmail: e.target.value })}
                                                                    >
                                                                        <option value="">Select a staff</option>
                                                                        {(staffList || []).map((staff) => (
                                                                            <option key={staff.email} value={staff.email}>
                                                                                {staff.name ? `${staff.name} (${staff.email})` : staff.email}
                                                                            </option>
                                                                        ))}
                                                                    </select>
                                                                </div>

                                                                {/* DateTime Pickers */}
                                                                <div className='flex flex-row justify-between mt-2'>
                                                                    <div className="w-1/2 pr-2">
                                                                        <label>Start Date & Time</label>
                                                                        <input type="datetime-local"
                                                                            value={customService.dateIn || ''}
                                                                            min={formatDateISO(modalQuote.dateIn)}
                                                                            onChange={(e) => setCustomService({ ...customService, dateIn: e.target.value })}
                                                                            className="w-full border px-2 py-1 rounded bg-white text-slate-900"
                                                                        />
                                                                    </div>
                                                                    <div className="w-1/2 pl-2">
                                                                        <label>End Date & Time</label>
                                                                        <input type="datetime-local"
                                                                            value={customService.dateOut || ''}
                                                                            min={customService.dateIn || new Date().toISOString().split('T')[0]}
                                                                            disabled={!customService.dateIn}
                                                                            onChange={(e) => setCustomService({ ...customService, dateOut: e.target.value })}
                                                                            className="w-full border px-2 py-1 rounded bg-white text-slate-900"
                                                                        />
                                                                    </div>
                                                                </div>

                                                                {/* Toggle */}
                                                                <div className='flex flex-row'>
                                                                    <div className="mt-2 flex items-center w-1/2">
                                                                        <input
                                                                            id="onePerDay"
                                                                            type="checkbox"
                                                                            checked={customService.onePerDay || false}
                                                                            onChange={(e) => setCustomService({ ...customService, onePerDay: e.target.checked })}
                                                                            className="mr-2"
                                                                        />
                                                                        <label htmlFor="onePerDay" className="text-sm">Create one service per day?</label>
                                                                    </div>
                                                                    <div className="ml-2 mt-2 flex items-center w-1/2">
                                                                        <input
                                                                            id="perWeek"
                                                                            type="checkbox"
                                                                            checked={customService.perWeek || false}
                                                                            onChange={(e) => setCustomService({ ...customService, perWeek: e.target.checked, repetitions: 1 })}
                                                                            className="mr-2"
                                                                        />
                                                                        <label htmlFor="perWeek" className="text-sm">Same days next weeks?</label>
                                                                    </div>
                                                                </div>

                                                                {/* Repeat Cycle */}
                                                                <div className="mt-2">
                                                                    <label className="block text-sm font-medium">Cycle Repetitions:</label>
                                                                    <input
                                                                        type="number"
                                                                        min={0}
                                                                        value={customService.repetitions || 0}
                                                                        onChange={(e) => setCustomService({ ...customService, repetitions: parseInt(e.target.value, 10) })}
                                                                        className="w-full border px-2 py-1 rounded bg-white text-slate-900"
                                                                    />
                                                                </div>


                                                                {/* Add Button */}
                                                                <div className='flex justify-center'>
                                                                    <button
                                                                        className="mt-4 px-4 py-2 rounded bg-[#3BA0AC] hover:bg-[#6BBCC5] text-cyan-50"
                                                                        onClick={(e) => {
                                                                            e.preventDefault();
                                                                            try {
                                                                                const newServices = createCustomServices(customService);
                                                                                setCustomServiceList((prev) => [...prev, ...newServices]);
                                                                                setCustomService({});
                                                                            } catch (err) {
                                                                                alert(err.message);
                                                                            }
                                                                        }}
                                                                    >
                                                                        Add Service(s)
                                                                    </button>
                                                                    <button
                                                                        className="mt-4 px-4 py-2 ml-2 rounded bg-slate-600 hover:bg-slate-700 text-cyan-50"
                                                                        onClick={() => handleResetCustomService()}
                                                                    >
                                                                        Reset Service(s)
                                                                    </button>
                                                                </div>
                                                            </fieldset>

                                                            <fieldset className='flex-1 border p-4 rounded-2xl bg-white'>
                                                                <legend className="font-semibold text-sm">Custom Services</legend>
                                                                <div className='flex flex-col'>
                                                                    {(customServiceList || []).map((service, index) => (
                                                                        <div className='flex flex-row items-center justify-center border rounded-2xl mr-2 mb-2 bg-cyan-50'>
                                                                            <div className='ml-2 flex-1 text-left'>
                                                                                <label>
                                                                                    {index + 1}.- {service.name} - {formatDateTimeDisplayHours(service.dateIn)} to {formatDateTimeDisplayHours(service.dateOut)}
                                                                                </label>
                                                                            </div>
                                                                            <div className='mr-2'>
                                                                                <Trash2
                                                                                    className='text-red-400 hover:text-red-500'
                                                                                    onClick={() => handleDeleteCustomService(index)}
                                                                                />
                                                                            </div>
                                                                        </div>
                                                                    ))}
                                                                </div>
                                                            </fieldset>

                                                        </div>

                                                    </div>

                                                    <button
                                                        className="bg-[#118290] hover:bg-[#0d6c77] text-cyan-50 px-4 py-2 rounded w-full mt-4"
                                                        type="button"
                                                        onClick={() => handleCreateCustomExperience(modalQuote, customServiceList)}
                                                    >
                                                        Create Experience
                                                    </button>
                                                </motion.div>
                                            </motion.div>
                                        </motion.div>
                                    )}
                                </AnimatePresence>
                            </div>
                        </fieldset>
                    </div>
                </motion.div >
            </div >
        </>
    )
}