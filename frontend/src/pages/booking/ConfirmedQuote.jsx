import Cookies from 'js-cookie';
import { AnimatePresence, motion } from 'framer-motion';
import { useState, useEffect, useRef } from 'react';
import { useQuoteServices } from '../../store/quoteServices';
import { useNavigate, useLocation } from "react-router-dom";
import { Bed, CircleX, ConeIcon, Copy, MapPinCheckInside, MapPinPlus } from 'lucide-react';
import { useAuthStore } from '../../store/authStore';
import { useExperienceServices } from '../../store/experienceServices';
import toast from 'react-hot-toast';
import { useServiceServices } from '../../store/serviceServices';
import { useStaffServices } from '../../store/staffServices';
import { useProductServices } from '../../store/productServices';
import {useRoomReservationServices} from '../../store/roomReservationServices';

export default function ConfirmedQuote() {
    const { getConfirmedQuoteList } = useQuoteServices();
    const { createRoomReservation, getReservations }=useRoomReservationServices();
    const { getProductByStoreId } = useProductServices();
    const { createService } = useServiceServices();
    const { createExperience, getExperienceList } = useExperienceServices();
    const [quotes, setQuotes] = useState([]);
    const [loading, setLoading] = useState(false);
    const storeId = Cookies.get('storeId');
    const timezone = Cookies.get('timezone');
    const [quoteSearch, setQuoteSearch] = useState("");
    const { user } = useAuthStore();
    const [existingExperiences, setExistingExperiences] = useState([]);
    const [showOnlyUnprocessed, setShowOnlyUnprocessed] = useState(false);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [customService, setCustomService] = useState([]);
    const [customServiceList, setCustomServiceList] = useState([]);
    const { getStaffList } = useStaffServices();
    const [staffList, setStaffList] = useState([]);
    const [modalQuote, setModalQuote] = useState(null);
    const [productList, setProductList] = useState([]);
    const [quoteProductList, setQuoteProductList] = useState([]);
    const [nameAutoGenerated, setNameAutoGenerated] = useState(true);
    const [existingReservations, setExistingReservations] = useState([]);


    const location = useLocation();
    const navigate = useNavigate();

    const handleCloneClick = (quoteId) => {
        Cookies.set('clone', true)
        navigate(`/new-quote/${quoteId}`);
    };

    useEffect(() => {
        //console.log("Entre a useEffect [storeId, location.key]", timezone);
        const fetchQuotes = async () => {
            try {
                const response = await getConfirmedQuoteList(storeId);
                //console.log("Quote Response: ", response);
                setQuotes(response.quoteList);
            } catch (error) {
                console.error('Error fetching quotes:', error);
            } finally {
                setLoading(false);
            }
        };
        const fetchExperiences = async () => {
            try {
                const response = await getExperienceList(storeId);
                //console.log("getExperienceList Response: ", response);
                setExistingExperiences(response.experienceList || []);
            } catch (error) {
                console.error("Error fetching experiences:", error);
            }
        };
        const fetchReservations = async () => {
            const response = await getReservations(storeId);
            setExistingReservations(response.roomReservationList);
        }

        if (storeId) {
            fetchQuotes();
            fetchExperiences();
            fetchReservations();
        }
    }, [storeId, location.key]);

    useEffect(() => {
        if (location.state?.updated) {
            // Limpiar el estado para que no recargue de nuevo en otros montajes
            navigate(location.pathname, { replace: true, state: {} });
        }
    }, [location]);

    useEffect(() => {
        //console.log("El customService es: ", customService)
    }, [customService]);

    useEffect(() => {
        if (modalQuote?.customerEmail && customService.productName && nameAutoGenerated) {
            setCustomService(prev => ({
                ...prev,
                name: `S: ${modalQuote.customerEmail} - ${customService.productName}`
            }));
        }
    }, [modalQuote?.customerEmail, customService.productName, nameAutoGenerated]);


    const handleCreateExperience = async (quote) => {
        //console.log("En handleCreateExperience: ", quote);
        try {
            const serviceIds = [];
            const formDateIn = new Date(quote.dateIn).toISOString().split("T")[0]
            const formDateOut = new Date(quote.dateOut).toISOString().split("T")[0]
            for (const product of quote.productList) {
                console.log("El product es:", product);
                const servicePayload = {
                    name: "S: " + quote.customerEmail + " - " + product.productName,
                    productId: product.productID,
                    quoteId: quote._id,
                    customerEmail: quote.customerEmail,
                    storeId: quote.storeId,
                    userEmail: quote.userEmail
                }
                console.log("El servicePayload es:", servicePayload);
                const service = await createService(servicePayload);
                console.log("Respuesta de createService es:", service);
                serviceIds.push(service._id);
            };

            const experiencePayload = {
                name: "E: " + quote.customerEmail + " - " + formDateIn + " TO " + formDateOut,
                serviceList: serviceIds,
                storeId: storeId,
                userEmail: user.email,
                customerEmail: quote.customerEmail,
                dateIn: quote.dateIn,
                dateOut: quote.dateOut,
                quoteId: quote._id,
                source: quote.source
            }
            console.log("El experiencePayload es:", experiencePayload);
            const experience = await createExperience(experiencePayload);
            console.log("Respuesta de createExperience es:", experience);
            toast.success("Experience & Services created");
        } catch (error) {
            console.log("Error en handleCreateExperience:", error);
            toast.error("Error creating experience")
        }
    };

    const handleCreateReservation = async (quote) => {
        try {
            if (quote.roomList && quote.roomList.length > 0) {
                for (const room of quote.roomList) {
                    const reservationPayload = {
                        roomId: room.roomId,
                        quoteId: quote._id,
                        customerEmail: quote.customerEmail,
                        storeId: quote.storeId,
                        dateIn: room.roomDateIn,
                        dateOut: room.roomDateOut,
                        bedsReserved: room.Qty,
                        userEmail: quote.userEmail,
                    }
                    //console.log("Payload para createRoomReservation: ", reservationPayload)
                    await createRoomReservation(reservationPayload);
                };
            }
            toast.success("Reservation Created")
        } catch (error) {
            toast.error("Error creating the reservation")
        }
    };

    const handleCreateCustomeExperience = async (quote, customServiceList) => {
        console.log("En handle CreateCustomeExperience: ", quote);
        console.log("En handle CreateCustomeExperience customServiceList: ", customServiceList);
        setLoading(true);
        try {
            const serviceIds = [];
            const formDateIn = new Date(quote.dateIn).toISOString().split("T")[0]
            const formDateOut = new Date(quote.dateOut).toISOString().split("T")[0]

            for (const auxService of customServiceList) {
                console.log("El service es:", auxService);
                const servicePayload = {
                    name: auxService.name,
                    productId: auxService.productId,
                    quoteId: quote._id,
                    customerEmail: quote.customerEmail,
                    storeId: quote.storeId,
                    userEmail: quote.userEmail,
                    dateIn: auxService.dateIn,
                    dateOut: auxService.dateOut,
                    staffEmail: auxService.staffEmail
                }
                console.log("El servicePayload es:", servicePayload);
                const service = await createService(servicePayload);
                console.log("Respuesta de createService es:", service);
                serviceIds.push(service._id);
            };

            const experiencePayload = {
                name: "E: " + quote.customerEmail + " - " + formDateIn + " TO " + formDateOut,
                serviceList: serviceIds,
                storeId: storeId,
                userEmail: user.email,
                customerEmail: quote.customerEmail,
                dateIn: quote.dateIn,
                dateOut: quote.dateOut,
                quoteId: quote._id,
                source: quote.source
            }
            console.log("El experiencePayload es:", experiencePayload);
            const experience = await createExperience(experiencePayload);
            console.log("Respuesta de createExperience es:", experience);
            toast.success("Experience & Services created");
            setCustomServiceList(null);
            setIsModalOpen(false);
            setModalQuote(null);
            const response = await getExperienceList(storeId);
            setExistingExperiences(response.experienceList || []);
            setLoading(false);
        } catch (error) {
            console.log("Error en handleCreateExperience:", error);
            toast.error("Error creating experience")
            setLoading(false)
        }
    };

    const handleOpenModal = async (quote) => {
        try {
            const response = await getStaffList(storeId);
            setStaffList(response.staffList);
            const prodResponse = await getProductByStoreId(storeId);
            setProductList(prodResponse.productList)
            toast.success("Open Modal");
            setModalQuote(quote);
            setNameAutoGenerated(true);
            setIsModalOpen(true);
        } catch (error) {
            console.error('Error fetching staff:', error);
        }
    };

    const formatDateInput = (dateStr) => {
        if (!dateStr) return "";
        const date = new Date(dateStr);
        const tzOffset = date.getTimezoneOffset() * 60000; // en milisegundos
        const localISOTime = new Date(date.getTime() - tzOffset).toISOString().slice(0, 16);
        return localISOTime;
    };

    const daysCalc = (datein, dateout) => {
        const initialDate = new Date(datein);
        const endDate = new Date(dateout);
        const msDiff = endDate.getTime() - initialDate.getTime();
        const dias = Math.floor(msDiff / (1000 * 60 * 60 * 24));
        return dias;
    };

    const formatDateDisplay = (dateStr) => {
        if (!dateStr) return "";
        const date = new Date(dateStr);

        const day = String(date.getDate()).padStart(2, "0");
        const month = String(date.getMonth() + 1).padStart(2, "0"); // meses 0-indexed
        const year = date.getFullYear();

        const hours = String(date.getHours()).padStart(2, "0");
        const minutes = String(date.getMinutes()).padStart(2, "0");

        return `${day}-${month}-${year} ${hours}:${minutes}`;
    };


    return (
        <div className="flex flex-col min-h-screen w-full bg-blue-950 text-white px-4 py-6 sm:px-8 sm:py-10">
            <motion.div
                initial={{ opacity: 0, scale: 2 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                transition={{ duration: 0.5 }}
                className="flex flex-col w-full max-w-8xl mx-auto bg-blue-900 bg-opacity-80 backdrop-filter backdrop-blur-lg rounded-2xl shadow-2xl border border-gray-800 overflow-hidden min-h-screen"
            >
                <h1 className="text-3xl font-bold mt-6 mb-6 text-center text-white bg-clip-text">Confirmed Quotes</h1>
                <div>
                    <fieldset className="flex-grow space-y-4 border rounded-2xl p-4 ml-4 mr-4">
                        <legend className="text-2xl font-bold">Quote List</legend>
                        <input
                            type="text"
                            placeholder="Search quote by email..."
                            className="w-full p-2 border border-gray-300 rounded"
                            value={quoteSearch}
                            onChange={(e) => setQuoteSearch(e.target.value)}
                            onKeyDown={(e) => {
                                if (e.key === 'Enter') {
                                    e.preventDefault();
                                    // Add logic if we want to do something when enter is pressed
                                }
                            }}
                        />
                        <div className="flex items-center space-x-2 mb-2">
                            <label htmlFor="filterSwitch" className="text-white font-medium">Show only unprocessed quotes</label>
                            <input
                                id="filterSwitch"
                                type="checkbox"
                                checked={showOnlyUnprocessed}
                                onChange={(e) => setShowOnlyUnprocessed(e.target.checked)}
                                className="w-5 h-5 rounded accent-blue-600"
                            />
                        </div>
                        <div className="grid gap-4 grid-cols-1 sm:grid-cols-3 md:grid-cols-2 lg:grid-cols-1">
                            {quotes.length === 0 ? (
                                <p>No Quotes found for this store.</p>
                            ) : (
                                quotes
                                    .filter(quote =>
                                        quote.customerEmail.toLowerCase().includes(quoteSearch.toLowerCase()) &&
                                        (!showOnlyUnprocessed || !existingExperiences.some(exp => exp.quoteId === quote._id))
                                    )
                                    .map((quote) => {
                                        const alreadyExists = existingExperiences.some(exp => exp.quoteId === quote._id);
                                        const reservationAlreadyExists = existingReservations.some(exp => exp.quoteId === quote._id);
                                        //console.log("El valor de existingExperiences:", alreadyExists," - ", existingExperiences, " - ", quote._id);
                                        return (
                                            <div
                                                key={quote._id}
                                                className="border rounded-lg p-4 hover:shadow transition relative border-gray-300 bg-blue-100 flex flex-col sm:flex-row sm:justify-between sm:items-center space-y-4 sm:space-y-0"
                                            >
                                                <div>
                                                    <h3 className="text-md sm:text-lg font-semibold text-gray-800">
                                                        {quote.customerEmail} - From: {new Date(quote.dateIn).toLocaleDateString("en-US", {
                                                            timeZone: timezone || "America/Guatemala",
                                                            year: "numeric",
                                                            month: "long",
                                                            day: "numeric",
                                                        })}
                                                        {' to ' + new Date(quote.dateOut).toLocaleDateString("en-US", {
                                                            timeZone: timezone || "America/Guatemala",
                                                            year: "numeric",
                                                            month: "long",
                                                            day: "numeric",
                                                        })}
                                                        {' - ' + quote.productList.length + ' Products '} -  ${quote.finalPrice}
                                                    </h3>
                                                    <div>
                                                        {quote.roomList?.map((room) => {
                                                            <div className='flex flex-col'>
                                                                <p>Room: {room.roomName}</p>
                                                                <p>Check-In: {formatDateDisplay(room.roomDateIn)}</p>
                                                                <p>Check-Out: {formatDateDisplay(room.roomDateOut)}</p>
                                                            </div>
                                                        })
                                                        }
                                                    </div>
                                                </div>

                                                <div className={`flex flex-col sm:flex-row gap-2 w-full ${alreadyExists ? "sm:justify-end sm:w-1/2" : "sm:w-1/2"}`}>
                                                    <motion.button
                                                        type='button'
                                                        whileHover={{ scale: 1.05 }}
                                                        whileTap={{ scale: 0.95 }}
                                                        onClick={() => handleCloneClick(quote._id)}
                                                        className={`py-2 px-3 sm:py-3 sm:px-4 bg-gradient-to-r from-blue-500 to-blue-600 text-white font-bold rounded-lg shadow-lg
                                                            hover:from-blue-600 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900
                                                            w-full ${alreadyExists ? "sm:w-1/4 sm:self-end" : ""}`}
                                                    >
                                                        <div className='flex flex-col justify-center items-center text-sm sm:text-base'>
                                                            <Copy />
                                                            <span>Clone Quote</span>
                                                        </div>
                                                    </motion.button>
                                                    {(quote.roomList?.length > 0 && !reservationAlreadyExists) && (
                                                        <motion.button
                                                            type='button'
                                                            whileHover={{ scale: 1.05 }}
                                                            whileTap={{ scale: 0.95 }}
                                                            onClick={() => handleCreateReservation(quote)}
                                                            className={`py-2 px-3 sm:py-3 sm:px-4 bg-gradient-to-r from-blue-500 to-blue-600 text-white font-bold rounded-lg shadow-lg
                                                            hover:from-blue-600 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900
                                                            w-full ${alreadyExists ? "sm:w-1/4 sm:self-end" : ""}`}
                                                        >
                                                            <div className='flex flex-col justify-center items-center text-sm sm:text-base'>
                                                                <Bed />
                                                                <span>Confim Room Reservation</span>
                                                            </div>
                                                        </motion.button>
                                                    )}

                                                    {!alreadyExists && (
                                                        <>
                                                            <motion.button
                                                                type='button'
                                                                whileHover={{ scale: 1.05 }}
                                                                whileTap={{ scale: 0.95 }}
                                                                onClick={() => handleCreateExperience(quote)}
                                                                className='w-full py-2 px-3 sm:py-3 sm:px-4 bg-gradient-to-r from-blue-500 to-blue-600 text-white font-bold rounded-lg shadow-lg
                                                                 hover:from-blue-600 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900'
                                                            >
                                                                <div className='flex flex-col justify-center items-center text-sm sm:text-base'>
                                                                    <MapPinCheckInside />
                                                                    <span>Create Experience</span>
                                                                </div>
                                                            </motion.button>

                                                            <motion.button
                                                                type='button'
                                                                whileHover={{ scale: 1.05 }}
                                                                whileTap={{ scale: 0.95 }}
                                                                onClick={() => handleOpenModal(quote)}
                                                                className='w-full py-2 px-3 sm:py-3 sm:px-4 bg-gradient-to-r from-blue-500 to-blue-600 text-white font-bold rounded-lg shadow-lg
                                                                 hover:from-blue-600 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-gray-900'
                                                            >
                                                                <div className='flex flex-col justify-center items-center text-sm sm:text-base'>
                                                                    <MapPinPlus />
                                                                    <span>Create Custom Experience</span>
                                                                </div>
                                                            </motion.button>
                                                        </>
                                                    )}
                                                </div>
                                            </div>
                                        );
                                    })

                            )}
                            <AnimatePresence className="relative">
                                {loading && (
                                    <div className="absolute inset-0 bg-black bg-opacity-40 backdrop-blur-sm flex items-center justify-center z-50 rounded-2xl">
                                        <div className="text-white text-lg font-semibold animate-pulse">Creating...</div>
                                    </div>
                                )}
                                {isModalOpen && modalQuote && (
                                    <motion.div className={`relative ${loading ? 'pointer-events-none opacity-50' : ''}`}>

                                        <motion.div
                                            key="custom-experience-modal"
                                            className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 "
                                            initial={{ opacity: 0 }}
                                            animate={{ opacity: 1 }}
                                            exit={{ opacity: 0 }}
                                        >
                                            <motion.div
                                                className="bg-blue-900 rounded-2xl p-6 h-[90%] overflow-y-auto relative"
                                                initial={{ scale: 0.8 }}
                                                animate={{ scale: 1 }}
                                                exit={{ scale: 0.8 }}
                                                transition={{ duration: 0.3 }}
                                            >
                                                <button
                                                    type="button"
                                                    className="absolute top-3 right-3 text-gray-300 hover:text-white"
                                                    onClick={() => {
                                                        setIsModalOpen(false);
                                                        setModalQuote(null); // Resetear
                                                    }}
                                                >
                                                    <CircleX />
                                                </button>

                                                <h2 className="text-xl font-bold mb-4 text-center text-white">Custom Experience</h2>

                                                <fieldset className='flex-1 border p-4 rounded-2xl'>
                                                    <legend className="font-semibold text-sm">Quoted Dates</legend>
                                                    <div className='flex flex-row justify-center'>
                                                        <label htmlFor="quoteDateIn" className='text-lg font-bold'>Date In: {formatDateDisplay(modalQuote.dateIn)}</label>
                                                        <label htmlFor="quoteDateOut" className='ml-2 text-lg font-bold'> | Date Out: {formatDateDisplay(modalQuote.dateOut)}</label>
                                                    </div>
                                                </fieldset>

                                                {/* CONTENIDO DEL MODAL (usa modalQuote en vez de quote directamente) */}
                                                <div className="space-y-4 mt-2">
                                                    <div className='flex flex-row w-full gap-x-2'>
                                                        <fieldset className='flex-1 border p-4 rounded-2xl'>
                                                            <legend className="font-semibold text-sm">Quoted Products</legend>
                                                            <div className='flex flex-col'>
                                                                {(modalQuote.productList || []).map((product) => (
                                                                    <label key={product._id} value={product._id}>
                                                                        {product.productName} - {product.Qty}
                                                                    </label>
                                                                ))}
                                                            </div>
                                                        </fieldset>
                                                    </div>
                                                    <div className='flex flex-row'>
                                                        <fieldset className='border p-4 rounded-2xl mr-2'>
                                                            <legend className="font-semibold text-sm">Service Data</legend>
                                                            {/* Product Selection */}
                                                            <div className="mt-2">
                                                                <label className="block text-sm font-medium">Product:</label>
                                                                <select
                                                                    className="w-full border border-gray-300 bg-white text-blue-950 rounded px-3 py-2"
                                                                    value={customService.productId || ''}
                                                                    onChange={(e) => {
                                                                        const selectedProduct = productList.find(p => p._id === e.target.value);
                                                                        if (selectedProduct) {
                                                                            setCustomService({
                                                                                ...customService,
                                                                                productId: selectedProduct._id,
                                                                                productName: selectedProduct.name
                                                                            });
                                                                            setNameAutoGenerated(true); // activa autogeneración de nombre si se cambia el producto
                                                                        }
                                                                    }}
                                                                >
                                                                    <option value="">Select a Product</option>
                                                                    {productList.map((product) => (
                                                                        <option key={product._id} value={product._id}>
                                                                            {product.name} - ${product.price}
                                                                        </option>
                                                                    ))}
                                                                </select>
                                                            </div>
                                                            <div>
                                                                <label className="block text-sm font-medium">Base Service Name:</label>
                                                                <input
                                                                    type="text"
                                                                    className={`w-full border border-gray-300  ${!customService.productId ? 'bg-gray-600' : 'bg-white'} text-blue-950 rounded px-3 py-2 mt-1`}
                                                                    value={customService.name || ''}
                                                                    disabled={!customService.productId}
                                                                    onChange={(e) => {
                                                                        setNameAutoGenerated(false); // Usuario está editando manualmente
                                                                        setCustomService({ ...customService, name: e.target.value });
                                                                    }}
                                                                />
                                                            </div>


                                                            {/* Staff Selection */}
                                                            <div className='mt-2'>
                                                                <label className="block text-sm font-medium">Staff Email:</label>
                                                                <select
                                                                    className="w-full border border-gray-300 bg-white text-blue-950 rounded px-3 py-2 mt-1"
                                                                    value={customService.staffEmail || ''}
                                                                    onChange={(e) => setCustomService({ ...customService, staffEmail: e.target.value })}
                                                                >
                                                                    <option value="">Select a staff</option>
                                                                    {(staffList || []).map((staff) => (
                                                                        <option key={staff.email} value={staff.email}>
                                                                            {staff.name ? `${staff.name} (${staff.email})` : staff.email}
                                                                        </option>
                                                                    ))}
                                                                </select>
                                                            </div>

                                                            {/* DateTime Pickers */}
                                                            <div className='flex flex-row justify-between mt-2'>
                                                                <div className="w-1/2 pr-2">
                                                                    <label>Start Date & Time</label>
                                                                    <input type="datetime-local"
                                                                        value={customService.dateIn || ''}
                                                                        onChange={(e) => setCustomService({ ...customService, dateIn: e.target.value })}
                                                                        className="w-full border px-2 py-1 rounded bg-white text-blue-950"
                                                                    />
                                                                </div>
                                                                <div className="w-1/2 pl-2">
                                                                    <label>End Date & Time</label>
                                                                    <input type="datetime-local"
                                                                        value={customService.dateOut || ''}
                                                                        onChange={(e) => setCustomService({ ...customService, dateOut: e.target.value })}
                                                                        className="w-full border px-2 py-1 rounded bg-white text-blue-950"
                                                                    />
                                                                </div>
                                                            </div>

                                                            {/* Toggle */}
                                                            <div className='flex flex-row'>
                                                                <div className="mt-2 flex items-center w-1/2">
                                                                    <input
                                                                        id="onePerDay"
                                                                        type="checkbox"
                                                                        checked={customService.onePerDay || false}
                                                                        onChange={(e) => setCustomService({ ...customService, onePerDay: e.target.checked })}
                                                                        className="mr-2"
                                                                    />
                                                                    <label htmlFor="onePerDay" className="text-sm">Create one service per day?</label>
                                                                </div>
                                                                <div className="ml-2 mt-2 flex items-center w-1/2">
                                                                    <input
                                                                        id="perWeek"
                                                                        type="checkbox"
                                                                        checked={customService.perWeek || false}
                                                                        onChange={(e) => setCustomService({ ...customService, perWeek: e.target.checked, repetitions: 1 })}
                                                                        className="mr-2"
                                                                    />
                                                                    <label htmlFor="perWeek" className="text-sm">Same days next weeks?</label>
                                                                </div>
                                                            </div>

                                                            {/* Repeat Cycle */}
                                                            <div className="mt-2">
                                                                <label className="block text-sm font-medium">Cycle Repetitions:</label>
                                                                <input
                                                                    type="number"
                                                                    min={0}
                                                                    value={customService.repetitions || 0}
                                                                    onChange={(e) => setCustomService({ ...customService, repetitions: parseInt(e.target.value, 10) })}
                                                                    className="w-full border px-2 py-1 rounded bg-white text-blue-950"
                                                                />
                                                            </div>


                                                            {/* Add Button */}
                                                            <div className='flex justify-center'>
                                                                <button
                                                                    className="mt-4 px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700"
                                                                    onClick={(e) => {
                                                                        e.preventDefault();
                                                                        const {
                                                                            name,
                                                                            dateIn,
                                                                            dateOut,
                                                                            repetitions,
                                                                            productId,
                                                                            staffEmail,
                                                                            onePerDay,
                                                                            perWeek
                                                                        } = customService;

                                                                        if (!dateIn || !dateOut || !productId) {
                                                                            alert('Please fill in all required fields.');
                                                                            return;
                                                                        }

                                                                        const inDate = new Date(dateIn);
                                                                        const outDate = new Date(dateOut);
                                                                        const diffDays = daysCalc(inDate, outDate) || 0; //del 13 al 17 = 4
                                                                        const repetition = repetitions || 0;
                                                                        let newServices = [];
                                                                        const auxDateIn = new Date(inDate);
                                                                        auxDateIn.setDate(auxDateIn.getDate());
                                                                        const auxDateOut = new Date(outDate);
                                                                        auxDateOut.setDate(auxDateOut.getDate());
                                                                        const auxWeekDateIn = new Date(inDate);
                                                                        auxWeekDateIn.setDate(auxWeekDateIn.getDate());
                                                                        let finalCounter = 0;
                                                                        let initalCounter = 1;
                                                                        /*
                                                                        initDay = 05-05
                                                                        outDay = 07-05
                                                                        repetition = 1
                                                                        diffDays = 2
                                                                        finalCounter = 3
                                                                        */

                                                                        if (perWeek) {
                                                                            if (onePerDay) {
                                                                                finalCounter = (repetition + 1) * (diffDays + 1)
                                                                                const auxHours = auxDateIn.getHours() + 4;
                                                                                for (let a = 0; a <= repetition; a++) {
                                                                                    auxDateIn.setDate(auxWeekDateIn.getDate() + (a * 7));
                                                                                    for (let i = 0; i <= diffDays; i++) {

                                                                                        auxDateOut.setDate(auxDateIn.getDate());
                                                                                        auxDateOut.setHours(auxHours);
                                                                                        console.log("El dateIn es", auxDateIn, " El dateOut es: ", auxDateOut, " diffDays: ", diffDays, " I: ", i, " Repetition: ", a)
                                                                                        newServices.push({
                                                                                            name: name + " - " + initalCounter + " of " + finalCounter,
                                                                                            dateIn: auxDateIn.toISOString(),
                                                                                            dateOut: auxDateOut.toISOString(),
                                                                                            productId,
                                                                                            staffEmail
                                                                                        });
                                                                                        auxDateIn.setDate(auxDateIn.getDate() + 1);
                                                                                        initalCounter = initalCounter + 1;
                                                                                        console.log("El listado de servicios es: ", newServices);
                                                                                    }
                                                                                }

                                                                            } else {
                                                                                finalCounter = repetition + 1;
                                                                                for (let i = 0; i <= repetition; i++) {
                                                                                    console.log("El dateIn es", auxDateIn, " El dateOut es: ", auxDateOut, " diffDays: ", diffDays, " I: ", i, " Repetition: ", repetition)
                                                                                    newServices.push({
                                                                                        name: name + " - " + initalCounter + " of " + finalCounter,
                                                                                        dateIn: auxDateIn.toISOString(),
                                                                                        dateOut: auxDateOut.toISOString(),
                                                                                        productId,
                                                                                        staffEmail
                                                                                    });
                                                                                    auxDateIn.setDate(auxDateIn.getDate() + 7);
                                                                                    //auxDateIn = auxDateOut + i;

                                                                                    auxDateOut.setDate(auxDateOut.getDate() + 7);
                                                                                    //auxDateOut = auxDateOut + diffDays;
                                                                                    initalCounter = initalCounter + 1;
                                                                                    console.log("El listado de servicios es: ", newServices);
                                                                                }
                                                                            }
                                                                        } else {
                                                                            if (onePerDay) {
                                                                                const auxHours = auxDateIn.getHours() + 4;
                                                                                /*
                                                                                    initDay = 05-05
                                                                                    outDay = 07-05
                                                                                    repetition = 0
                                                                                    diffDays = 2
                                                                                    finalCounter = 3
                                                                                */
                                                                                finalCounter = (repetition + 1) * (diffDays + 1)
                                                                                for (let a = 0; a <= repetition; a++) {
                                                                                    for (let i = 0; i <= diffDays; i++) {
                                                                                        auxDateOut.setDate(auxDateIn.getDate());
                                                                                        auxDateOut.setHours(auxHours);
                                                                                        console.log("El dateIn es", auxDateIn, " El dateOut es: ", auxDateOut, " diffDays: ", diffDays, " I: ", i, " Repetition: ", a)
                                                                                        newServices.push({
                                                                                            name: name + " - " + initalCounter + " of " + finalCounter,
                                                                                            dateIn: auxDateIn.toISOString(),
                                                                                            dateOut: auxDateOut.toISOString(),
                                                                                            productId,
                                                                                            staffEmail
                                                                                        });
                                                                                        auxDateIn.setDate(auxDateIn.getDate() + 1);
                                                                                        initalCounter = initalCounter + 1;
                                                                                        console.log("El listado de servicios es: ", newServices);

                                                                                    }
                                                                                }
                                                                            } else {
                                                                                finalCounter = (repetition + 1)
                                                                                console.log("El final counter es: ", finalCounter)
                                                                                for (let i = 0; i <= repetition; i++) {
                                                                                    console.log("El dateIn es", auxDateIn, " El dateOut es: ", auxDateOut, " diffDays: ", diffDays, " I: ", i, " Repetition: ", repetition)
                                                                                    newServices.push({
                                                                                        name: name + " - " + initalCounter + " of " + finalCounter,
                                                                                        dateIn: auxDateIn.toISOString(),
                                                                                        dateOut: auxDateOut.toISOString(),
                                                                                        productId,
                                                                                        staffEmail
                                                                                    });
                                                                                    auxDateIn.setDate(auxDateOut.getDate() + 1);


                                                                                    auxDateOut.setDate(auxDateOut.getDate() + (diffDays + 1));
                                                                                    initalCounter = initalCounter + 1;
                                                                                    console.log("El listado de servicios es: ", newServices);
                                                                                }
                                                                            }
                                                                        }
                                                                        setCustomServiceList((prev) => [...prev, ...newServices]);
                                                                        //newServices = [];
                                                                        setCustomService({}); // Reset input
                                                                    }}
                                                                >
                                                                    Add Service(s)
                                                                </button>
                                                            </div>
                                                        </fieldset>

                                                        <fieldset className='flex-1 border p-4 rounded-2xl'>
                                                            <legend className="font-semibold text-sm">Custom Services</legend>
                                                            <div className='flex flex-col'>
                                                                {(customServiceList || []).map((service) => (
                                                                    <label>
                                                                        {service.name}
                                                                    </label>
                                                                ))}
                                                            </div>
                                                        </fieldset>

                                                    </div>

                                                </div>

                                                <button
                                                    className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded w-full mt-4"
                                                    type="button"
                                                    onClick={() => handleCreateCustomeExperience(modalQuote, customServiceList)}
                                                >
                                                    Create Experience
                                                </button>
                                            </motion.div>
                                        </motion.div>
                                    </motion.div>
                                )}
                            </AnimatePresence>
                        </div>
                    </fieldset>
                </div>
            </motion.div >
        </div >
    )
}