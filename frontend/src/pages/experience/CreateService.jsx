import Cookies from 'js-cookie';
import { AnimatePresence, motion } from 'framer-motion';
import { useState, useEffect, useRef } from 'react';
import { useAuthStore } from '../../store/authStore';
import toast from 'react-hot-toast';
import { useServiceServices } from '../../store/serviceServices';
import { useStaffServices } from '../../store/staffServices';
import { useProductServices } from '../../store/productServices';
import { useTypeServices } from '../../store/typeServices';
import ProductSelect from '../../components/ProductSelect';
import { useCustomerServices } from '../../store/customerServices';
import CustomerDetails from '../../components/CustomerDetail'
import { Contact2, Search, Trash2 } from 'lucide-react';

export default function CreateService() {
    const { getProductByStoreId } = useProductServices();
    const { createService } = useServiceServices();
    const { getTypeByCategory } = useTypeServices();
    const [loading, setLoading] = useState(false);
    const storeId = Cookies.get('storeId');
    const timezone = Cookies.get('timezone');
    const { user } = useAuthStore();
    const [types, setTypes] = useState([]);
    const { getStaffList } = useStaffServices();
    const [staffList, setStaffList] = useState([]);
    const [productList, setProductList] = useState([]);
    const [customService, setCustomService] = useState([]);
    const [customServiceList, setCustomServiceList] = useState([]);
    const [nameAutoGenerated, setNameAutoGenerated] = useState(true);
    const [isCustomerModalOpen, setIsCustomerModalOpen] = useState(false);
    const [isNew, setIsNew] = useState(true);
    const [customer, setCustomer] = useState({});
    const { getCustomerEmail, createCustomer, updateCustomer } = useCustomerServices();
    const customerEmailRef = useRef(null);

    const formatDateInput = (dateStr) => {
        if (!dateStr) return "";
        const date = new Date(dateStr);
        const tzOffset = date.getTimezoneOffset() * 60000; // en milisegundos
        const localISOTime = new Date(date.getTime() - tzOffset).toISOString().slice(0, 16);
        return localISOTime;
    };

    const daysCalc = (datein, dateout) => {
        const initialDate = new Date(datein);
        const endDate = new Date(dateout);
        const msDiff = endDate.getTime() - initialDate.getTime();
        const dias = Math.floor(msDiff / (1000 * 60 * 60 * 24));
        return dias;
    };

    const formatDateDisplay = (dateStr) => {
        if (!dateStr) return "";
        const date = new Date(dateStr);

        const day = String(date.getDate()).padStart(2, "0");
        const month = String(date.getMonth() + 1).padStart(2, "0"); // meses 0-indexed
        const year = date.getFullYear();

        const hours = String(date.getHours()).padStart(2, "0");
        const minutes = String(date.getMinutes()).padStart(2, "0");

        return `${day}-${month}-${year} ${hours}:${minutes}`;
    };

    const [form, setForm] = useState({
        name: "",
        productId: "",
        staffEmail: "",
        customerEmail: "",
        dateIn: "",
        dateOut: "",
        type: "Customer",
        storeId: Cookies.get("storeId") || "",
        userEmail: "", // Deberías obtener el userEmail (ej. de auth)
    });

    useEffect(() => {
        async function fetchData() {
            const storeId = Cookies.get("storeId");
            setForm((f) => ({ ...f, storeId }));

            // Cargar staff
            const staff = await getStaffList(storeId);
            console.log("staff: ", staff)
            setStaffList(staff.staffList);

            // Cargar productos
            const products = await getProductByStoreId(storeId);
            console.log("products: ", products)
            setProductList(products.productList);

            // Cargar tipos
            const typesFromAPI = await getTypeByCategory("SERVICE", storeId);
            console.log("typesFromAPI: ", typesFromAPI)
            setTypes(typesFromAPI.typeList);
        }
        fetchData();
    }, []);

    const handleCustomerEmailSearch = async (customerEmail) => {
        //console.log("El email en handleCustomerEmailSearch es: ", customerEmail);
        try {
            const response = await getCustomerEmail(customerEmail);
            console.log("F: getCustomerEmail es:", response);
            const found = response.customerList;
            console.log("F: el found es:", found);
            if (found) {
                toast.success('Customer Found');
                //console.log("El cliente encontrdo es:", found)
                found.map((cust) => (
                    setCustomer({
                        _id: cust._id,
                        email: cust.email,
                        name: cust.name || '',
                        phone: cust.phone || '',
                        country: cust.country || '',
                        languages: cust.languages || [],
                        birthdate: cust.birthdate ? cust.birthdate.slice(0, 10) : '',
                        nationalId: cust.nationalId || '',
                        diet: cust.diet || '',
                        emergencyContactName: cust.emergencyContact?.emergencyContactName || '',
                        emergencyContactPhone: cust.emergencyContact?.emergencyContactPhone || '',
                        divingCertificates: cust.divingCertificates || [],
                    }
                    )));
                setCustomService((prev) => ({
                    ...prev,
                    customerEmail: found[0].email,
                }));
                setIsNew(false);
                setIsCustomerModalOpen(false);
            } else {
                toast.success('Customer not found, please create one');
                setCustomer({
                    _id: '',
                    email: customerEmail,
                    name: '',
                    phone: '',
                    country: '',
                    languages: [],
                    birthdate: '',
                    nationalId: '',
                    diet: '',
                    emergencyContactName: '',
                    emergencyContactPhone: '',
                    divingCertificates: [],
                });
                setCustomService((prev) => ({ ...prev, customerEmail: customerEmail }));
                setIsNew(true);
                setIsCustomerModalOpen(true);
            }
        } catch (err) {
            toast.success('Customer not found, please create one');
            setCustomer({
                _id: '',
                email: customerEmail,
                name: '',
                phone: '',
                country: '',
                languages: [],
                birthdate: '',
                nationalId: '',
                diet: '',
                emergencyContactName: '',
                emergencyContactPhone: '',
                divingCertificates: [],
            });
            setIsCustomerModalOpen(true);
        }
    };

    const handleSaveClient = async (e) => {
        try {
            console.log("F: El cliente es:", customer);
            const customerPayload = {
                _id: customer._id,
                email: customer.email,
                name: customer.name,
                phone: customer.phone,
                country: customer.country,
                languages: customer.languages,
                birthdate: customer.birthdate,
                nationalId: customer.nationalId,
                diet: customer.diet,
                emergencyContact: {
                    emergencyContactName: customer.emergencyContactName,
                    emergencyContactPhone: customer.emergencyContactPhone,
                },
                divingCertificates: customer.divingCertificates,
                storeId: storeId,
            };
            console.log("F: El cliente a CREAR o EDITAR es:", customerPayload);
            if (customerPayload._id) {
                // El cliente ya existe: actualizar
                //console.log("F: entré a modificar");
                await updateCustomer(customerPayload.email, customerPayload); // Asegúrate de tener esta función
                toast.success("Customer updated successfully");
            } else {
                // Crear nuevo cliente
                await createCustomer(customerPayload);
                toast.success("Customer created successfully");
            }
            setIsCustomerModalOpen(false);
            setIsNew(false);
        } catch (error) {
            toast.error('Error creating a Customer');
        }

    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);
        console.log("En  handleSubmit: ", customServiceList);

        try {
            for (const auxService of customServiceList) {
                //console.log("El service es:", auxService);
                const servicePayload = {
                    name: auxService.name,
                    productId: auxService.productId,
                    storeId: storeId,
                    userEmail: user.email,
                    dateIn: auxService.dateIn,
                    dateOut: auxService.dateOut,
                    type: auxService.type,
                    isPaid: auxService.isPaid,
                    staffEmail: auxService.staffEmail
                }
                //console.log("El servicePayload es:", servicePayload);
                const service = await createService(servicePayload);
                //console.log("Respuesta de createService es:", service);
            };
            toast.success("Services created");
            setLoading(false);
        } catch (error) {
            console.log("Error en handleSubmit:", error);
            toast.error("Error creating Services")
            setLoading(false)
        }
    };

    useEffect(() => {
        if (customService.productName && nameAutoGenerated) {
            setCustomService(prev => ({
                ...prev,
                name: `S: ${customService.productName}`
            }));
        }
    }, [customService.productName, nameAutoGenerated]);

    useEffect(() => {
        console.log("El listado de servicios es: ", customServiceList)
    }, [customServiceList]);

    const handleResetCustomService = () => {
        setCustomService({});
        setCustomServiceList([]);
    };

    const handleDeleteCustomService = (indexToDelete) => {
        setCustomServiceList(prevList => prevList.filter((_, i) => i !== indexToDelete));
    };


    return (
        <div className="flex flex-col min-h-screen w-full bg-blue-950 text-white px-4 py-6 sm:px-8 sm:py-10">
            <motion.div
                initial={{ opacity: 0, scale: 2 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                transition={{ duration: 0.5 }}
                className="flex flex-col w-full max-w-8xl mx-auto bg-blue-900 bg-opacity-80 backdrop-filter backdrop-blur-lg rounded-2xl shadow-2xl border border-gray-800 overflow-hidden min-h-screen"
            >
                <h1 className="text-3xl font-bold mt-6 mb-6 text-center text-white bg-clip-text">Create Service</h1>
                <form onSubmit={handleSubmit}>
                    <fieldset className='border p-4 rounded-2xl mr-2 ml-2'>
                        <legend className="font-semibold text-2xl">Service Data</legend>
                        <div>
                            <div className="flex items-center gap-2">
                                <input
                                    ref={customerEmailRef}
                                    type="email"
                                    name="customerEmail"
                                    value={customService.customerEmail}
                                    onChange={(e) =>
                                        setCustomService((prev) => ({
                                            ...prev,
                                            customerEmail: e.target.value,
                                        }))
                                    }
                                    onKeyDown={(e) => {
                                        if (e.key === 'Enter') {
                                            e.preventDefault();
                                            handleCustomerEmailSearch(customerEmailRef.current.value);
                                        }
                                    }}
                                    className="w-full border px-2 py-1 rounded bg-white text-blue-950"
                                    placeholder="Enter customer email"
                                />
                                <button
                                    type="button"
                                    onClick={() => handleCustomerEmailSearch(customerEmailRef.current.value)}
                                    className="bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700"
                                >
                                    <Search />
                                </button>

                                {!isNew && (
                                    <button
                                        type="button"
                                        variant="outline"
                                        className="bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700"
                                        onClick={() => setIsCustomerModalOpen(true)}
                                    >
                                        <Contact2 />
                                    </button>
                                )}
                                {isCustomerModalOpen && (
                                    <CustomerDetails
                                        isOpen={isCustomerModalOpen}
                                        onClose={() => setIsCustomerModalOpen(false)}
                                        customer={customer}
                                        setCustomer={setCustomer}
                                        onSave={handleSaveClient}
                                    />
                                )}
                            </div>
                        </div>
                        {/* Product Selection */}
                        <div>
                            <ProductSelect
                                productList={productList}
                                customService={customService}
                                setCustomService={setCustomService}
                                setNameAutoGenerated={setNameAutoGenerated}
                            />
                        </div>
                        <div>
                            <label className="block text-sm font-medium mt-5">Base Service Name:</label>
                            <input
                                type="text"
                                className={`w-full border border-gray-300  ${!customService.productId ? 'bg-gray-600' : 'bg-white'} text-blue-950 rounded px-3 py-2 mt-1`}
                                value={customService.name || ''}
                                disabled={!customService.productId}
                                onChange={(e) => {
                                    setNameAutoGenerated(false); // Usuario está editando manualmente
                                    setCustomService({ ...customService, name: e.target.value });
                                }}
                            />
                        </div>
                        {/* Staff && Type Selection */}
                        <div className='flex flex-row w-full mt-5'>
                            <div className='mt-2 flex flex-row w-1/2'>
                                <label className="block text-sm font-medium">Staff Email:</label>
                                <select
                                    className="w-full border border-gray-300 bg-white text-blue-950 rounded px-3 py-2"
                                    value={customService.staffEmail || ''}
                                    onChange={(e) => setCustomService({ ...customService, staffEmail: e.target.value })}
                                >
                                    <option value="">Select a staff</option>
                                    {(staffList || []).map((staff) => (
                                        <option key={staff.email} value={staff.email}>
                                            {staff.name ? `${staff.name} (${staff.email})` : staff.email}
                                        </option>
                                    ))}
                                </select>
                            </div>
                            <div className='mt-2 flex flex-row ml-2 w-1/2'>
                                <label className="block text-sm font-medium">Service Type:</label>
                                <select
                                    name="type"
                                    className="ml-2 w-2/3 border border-gray-300 bg-white text-blue-950 rounded px-3 py-2"
                                    value={customService.type || ''}
                                    onChange={(e) => setCustomService({ ...customService, type: e.target.value })}
                                >
                                    <option value="">Select a Type</option>
                                    {types.map((t) => (
                                        <option key={t.name} value={t.name}>
                                            {t.name}
                                        </option>
                                    ))}
                                </select>

                                {/* Conditional Toggle for "Front" Type */}
                                {customService.type === 'Front' && (
                                    <div className="mt-2 ml-2 flex items-center space-x-3 w-1/3">
                                        <span className="text-sm">Is the service paid?</span>
                                        <label className="relative inline-flex items-center cursor-pointer">
                                            <input
                                                type="checkbox"
                                                className="sr-only peer"
                                                checked={customService.isPaid || false}
                                                onChange={(e) => setCustomService({ ...customService, isPaid: e.target.checked })}
                                            />
                                            <div className="w-11 h-6 bg-gray-300 rounded-full peer peer-checked:bg-blue-600 transition-colors duration-200 peer-focus:ring-2 peer-focus:ring-blue-500" />
                                            <div className="absolute left-1 top-1 w-4 h-4 bg-white rounded-full transition-transform duration-200 transform peer-checked:translate-x-5" />
                                        </label>
                                    </div>
                                )}
                            </div>
                        </div>
                        <div className='border rounded-2xl mt-5 bg-blue-800'>
                            <div className='flex flex-row mt-5'>
                                {/* DateTime Pickers */}
                                <fieldset className='border rounded-2xl w-1/4 ml-2'>
                                    <legend className='ml-2 text-lg font-bold'>Dates & Cycle</legend>
                                    <div className='flex flex-row justify-between mt-2 ml-2 mr-2'>
                                        <div className="w-1/2 pr-2">
                                            <label>Start Date & Time</label>
                                            <input type="datetime-local"
                                                value={customService.dateIn || ''}
                                                onChange={(e) => setCustomService({ ...customService, dateIn: e.target.value })}
                                                className="w-full border px-2 py-1 rounded bg-white text-blue-950"
                                            />
                                        </div>
                                        <div className="w-1/2 pl-2">
                                            <label>End Date & Time</label>
                                            <input type="datetime-local"
                                                value={customService.dateOut || ''}
                                                onChange={(e) => setCustomService({ ...customService, dateOut: e.target.value })}
                                                className="w-full border px-2 py-1 rounded bg-white text-blue-950"
                                            />
                                        </div>
                                    </div>

                                    {/* Toggle */}
                                    <div className='flex flex-row ml-2 mr-2'>
                                        <div className="mt-2 flex items-center w-1/2">
                                            <input
                                                id="onePerDay"
                                                type="checkbox"
                                                checked={customService.onePerDay || false}
                                                onChange={(e) => setCustomService({ ...customService, onePerDay: e.target.checked })}
                                                className="mr-2"
                                            />
                                            <label htmlFor="onePerDay" className="text-sm">Create one service per day?</label>
                                        </div>
                                        <div className="ml-2 mt-2 flex items-center w-1/2">
                                            <input
                                                id="perWeek"
                                                type="checkbox"
                                                checked={customService.perWeek || false}
                                                onChange={(e) => setCustomService({ ...customService, perWeek: e.target.checked, repetitions: 1 })}
                                                className="mr-2"
                                            />
                                            <label htmlFor="perWeek" className="text-sm">Same days next weeks?</label>
                                        </div>
                                    </div>

                                    {/* Repeat Cycle */}
                                    <div className="mt-2 ml-2 mr-2 mb-2">
                                        <label className="block text-sm font-medium">Cycle Repetitions:</label>
                                        <input
                                            type="number"
                                            min={0}
                                            value={customService.repetitions || 0}
                                            onChange={(e) => setCustomService({ ...customService, repetitions: parseInt(e.target.value, 10) })}
                                            className="w-full border px-2 py-1 rounded bg-white text-blue-950"
                                        />
                                    </div>
                                </fieldset>

                                <fieldset className='border rounded-2xl ml-2 mr-2 w-3/4'>
                                    <legend className='ml-2 text-lg font-bold'>Services to create: {customServiceList.length}</legend>
                                    <div className='grid grid-cols-2 gap-2 ml-2'>
                                        {(customServiceList || []).map((service, index) => (
                                            <div className='flex flex-row items-center justify-center border rounded-2xl mr-2 mb-2 bg-blue-700'>
                                                <div className='ml-2'>
                                                    <label>
                                                        {index + 1}.- {service.name} - {formatDateDisplay(service.dateIn)} to {formatDateDisplay(service.dateOut)}
                                                    </label>
                                                </div>
                                                <div className='mr-2'>
                                                    <Trash2
                                                        className='text-red-500 hover:text-red-900'
                                                        onClick={() => handleDeleteCustomService(index)}
                                                    />
                                                </div>
                                            </div>
                                        ))}
                                    </div>
                                </fieldset>
                            </div>
                            {/* Add Button */}
                            <div className='flex justify-center mb-2'>
                                <button
                                    className="mt-4 px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700"
                                    onClick={(e) => {
                                        e.preventDefault();
                                        const {
                                            name,
                                            dateIn,
                                            dateOut,
                                            repetitions,
                                            productId,
                                            staffEmail,
                                            onePerDay,
                                            perWeek,
                                            type
                                        } = customService;

                                        if (!dateIn || !dateOut || !productId) {
                                            alert('Please fill in all required fields.');
                                            return;
                                        }

                                        const inDate = new Date(dateIn);
                                        const outDate = new Date(dateOut);
                                        const diffDays = daysCalc(inDate, outDate) || 0; //del 13 al 17 = 4
                                        const repetition = repetitions || 0;
                                        let newServices = [];
                                        const auxDateIn = new Date(inDate);
                                        auxDateIn.setDate(auxDateIn.getDate());
                                        const auxDateOut = new Date(outDate);
                                        auxDateOut.setDate(auxDateOut.getDate());
                                        const auxWeekDateIn = new Date(inDate);
                                        auxWeekDateIn.setDate(auxWeekDateIn.getDate());
                                        /*
                                        initDay = 05-05
                                        outDay = 07-05
                                        repetition = 1
                                        diffDays = 2
                                        finalCounter = 3
                                        */

                                        if (perWeek) {
                                            if (onePerDay) {
                                                const auxHours = auxDateIn.getHours() + 4;
                                                for (let a = 0; a <= repetition; a++) {
                                                    auxDateIn.setDate(auxWeekDateIn.getDate() + (a * 7));
                                                    for (let i = 0; i <= diffDays; i++) {

                                                        auxDateOut.setDate(auxDateIn.getDate());
                                                        auxDateOut.setHours(auxHours);
                                                        //console.log("El dateIn es", auxDateIn, " El dateOut es: ", auxDateOut, " diffDays: ", diffDays, " I: ", i, " Repetition: ", a)
                                                        newServices.push({
                                                            name: name + " - " + staffEmail,
                                                            dateIn: auxDateIn.toISOString(),
                                                            dateOut: auxDateOut.toISOString(),
                                                            productId,
                                                            type,
                                                            staffEmail
                                                        });
                                                        auxDateIn.setDate(auxDateIn.getDate() + 1);
                                                        //console.log("El listado de servicios es: ", newServices);
                                                    }
                                                }

                                            } else {
                                                for (let i = 0; i <= repetition; i++) {
                                                    //console.log("El dateIn es", auxDateIn, " El dateOut es: ", auxDateOut, " diffDays: ", diffDays, " I: ", i, " Repetition: ", repetition)
                                                    newServices.push({
                                                        name: name + " - " + staffEmail,
                                                        dateIn: auxDateIn.toISOString(),
                                                        dateOut: auxDateOut.toISOString(),
                                                        productId,
                                                        type,
                                                        staffEmail
                                                    });
                                                    auxDateIn.setDate(auxDateIn.getDate() + 7);
                                                    //auxDateIn = auxDateOut + i;

                                                    auxDateOut.setDate(auxDateOut.getDate() + 7);
                                                    //auxDateOut = auxDateOut + diffDays;
                                                    //console.log("El listado de servicios es: ", newServices);
                                                }
                                            }
                                        } else {
                                            if (onePerDay) {
                                                const auxHours = auxDateIn.getHours() + 4;
                                                /*
                                                    initDay = 05-05
                                                    outDay = 07-05
                                                    repetition = 0
                                                    diffDays = 2
                                                    finalCounter = 3
                                                */
                                                for (let a = 0; a <= repetition; a++) {
                                                    for (let i = 0; i <= diffDays; i++) {
                                                        auxDateOut.setDate(auxDateIn.getDate());
                                                        auxDateOut.setHours(auxHours);
                                                        //console.log("El dateIn es", auxDateIn, " El dateOut es: ", auxDateOut, " diffDays: ", diffDays, " I: ", i, " Repetition: ", a)
                                                        newServices.push({
                                                            name: name + " - " + staffEmail,
                                                            dateIn: auxDateIn.toISOString(),
                                                            dateOut: auxDateOut.toISOString(),
                                                            productId,
                                                            type,
                                                            staffEmail
                                                        });
                                                        auxDateIn.setDate(auxDateIn.getDate() + 1);
                                                        //console.log("El listado de servicios es: ", newServices);

                                                    }
                                                }
                                            } else {
                                                finalCounter = (repetition + 1)
                                                //console.log("El final counter es: ", finalCounter)
                                                for (let i = 0; i <= repetition; i++) {
                                                    console.log("El dateIn es", auxDateIn, " El dateOut es: ", auxDateOut, " diffDays: ", diffDays, " I: ", i, " Repetition: ", repetition)
                                                    newServices.push({
                                                        name: name + " - " + staffEmail,
                                                        dateIn: auxDateIn.toISOString(),
                                                        dateOut: auxDateOut.toISOString(),
                                                        productId,
                                                        type,
                                                        staffEmail
                                                    });
                                                    auxDateIn.setDate(auxDateOut.getDate() + 1);


                                                    auxDateOut.setDate(auxDateOut.getDate() + (diffDays + 1));
                                                    initalCounter = initalCounter + 1;
                                                    //console.log("El listado de servicios es: ", newServices);
                                                }
                                            }
                                        }
                                        setCustomServiceList((prev) => [...prev, ...newServices]);
                                        //newServices = [];
                                        setCustomService({}); // Reset input
                                    }}
                                >
                                    Add Service(s)
                                </button>
                                <button
                                    className="mt-4 px-4 py-2 ml-2 rounded bg-yellow-600 text-white hover:bg-yellow-700"
                                    type='button'
                                    onClick={() => handleResetCustomService()}
                                >
                                    Reset Service(s)
                                </button>
                            </div>
                        </div>

                    </fieldset>
                    <div className="flex flex-row justify-center">
                        <button type="submit" className="mt-4 mb-4 px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700" disabled={loading}>
                            {loading ? "Creating Services..." : "Create Services"}
                        </button>
                    </div>
                </form>
            </motion.div>
        </div>
    );
}