import Cookies from 'js-cookie';
import { AnimatePresence, motion } from 'framer-motion';
import { useState, useEffect, useRef } from 'react';
import { useAuthStore } from '../../store/authStore';
import toast from 'react-hot-toast';
import { useServiceServices } from '../../store/serviceServices';
import { useStaffServices } from '../../store/staffServices';
import { useProductServices } from '../../store/productServices';
import { useTypeServices } from '../../store/typeServices';
import ProductSelect from '../../components/ProductSelect';
import { useCustomerServices } from '../../store/customerServices';
import CustomerDetails from '../../components/CustomerDetail'
import { Contact2, Search, Trash2 } from 'lucide-react';
import { createCustomServices } from '../../components/createCustomService'
import LoadingSpinner from '../../components/LoadingSpinner';
import { useExperienceServices } from '../../store/experienceServices';
import Select from 'react-select';

export default function CreateService() {
    const { getProductByStoreId } = useProductServices();
    const { createService } = useServiceServices();
    const { getTypeByCategory } = useTypeServices();
    const [loading, setLoading] = useState(false);
    const storeId = Cookies.get('storeId');
    const timezone = Cookies.get('timezone');
    const { user } = useAuthStore();
    const [types, setTypes] = useState([]);
    const { getStaffList } = useStaffServices();
    const [staffList, setStaffList] = useState([]);
    const [productList, setProductList] = useState([]);
    const [customService, setCustomService] = useState([]);
    const [customServiceList, setCustomServiceList] = useState([]);
    const [nameAutoGenerated, setNameAutoGenerated] = useState(true);
    const [isCustomerModalOpen, setIsCustomerModalOpen] = useState(false);
    const [isCustomerFilled, setIsCustomerFilled] = useState(false);
    const [isNew, setIsNew] = useState(true);
    const [customer, setCustomer] = useState({});
    const { getCustomerEmail, createCustomer, updateCustomer } = useCustomerServices();
    const customerEmailRef = useRef(null);
    const [selectedType, setSelectedType] = useState("");
    const [existingExperiences, setExistingExperiences] = useState([]);
    const [selectedExperience, setSelectedExperience] = useState({});
    const { getValidExperienceByEmail, updateExperience } = useExperienceServices();

    const formatDateInput = (dateStr) => {
        if (!dateStr) return "";
        const date = new Date(dateStr);
        const tzOffset = date.getTimezoneOffset() * 60000; // en milisegundos
        const localISOTime = new Date(date.getTime() - tzOffset).toISOString().slice(0, 16);
        return localISOTime;
    };

    useEffect(() => {
        if (!nameAutoGenerated) return; // Solo autocompletar si no se editó manualmente

        const product = productList.find(p => p._id === customService.productId);
        const staff = staffList.find(s => s.email === customService.staffEmail);

        let newName = '';

        if (customService.type === 'Customer' && product && customer?.name) {
            newName = `${customService.name} - ${customer.name}`;
        } else if (customService.type === 'Back' && product && staff?.name) {
            newName = `${customService.name}  - ${staff.name}`;
        }

        setCustomService(prev => ({ ...prev, name: newName }));
    }, [
        customService.type,
        customer?.name,
    ]);

    const formatDateDisplay = (dateStr) => {
        if (!dateStr) return "";
        const date = new Date(dateStr);

        const weekday = date.toLocaleDateString("en-US", { weekday: "long" }); // Monday
        const month = date.toLocaleDateString("en-US", { month: "long" }); // May
        const day = String(date.getDate()).padStart(2, "0"); // 26
        const year = date.getFullYear(); // 2025

        return `${weekday}, ${month} ${day} ${year}`;
    };

    const [form, setForm] = useState({
        name: "",
        productId: "",
        staffEmail: "",
        customerEmail: "",
        dateIn: "",
        dateOut: "",
        type: "Customer",
        storeId: Cookies.get("storeId") || "",
        userEmail: "", // Deberías obtener el userEmail (ej. de auth)
    });

    const fetchProducts = async () => {
        setLoading(true)
        try {
            // Cargar productos
            const products = await getProductByStoreId(storeId);
            //console.log("products: ", products)
            setProductList(products.productList);
        } catch (error) {
            toast.error("Error Fetching Products")
        } finally {
            setLoading(false);
        }

    }

    useEffect(() => {
        async function fetchData() {
            try {
                const storeId = Cookies.get("storeId");
                setForm((f) => ({ ...f, storeId }));

                // Cargar staff
                const staff = await getStaffList(storeId);
                //console.log("staff: ", staff)
                setStaffList(staff.staffList);

                // Cargar tipos
                const typesFromAPI = await getTypeByCategory("SERVICE", storeId);
                //console.log("typesFromAPI: ", typesFromAPI)
                setTypes(typesFromAPI.typeList);
            } catch (error) {
                toast.error("Error Fetching Staff/Types")
            } finally {
                setLoading(false);
            }

        }
        fetchData();
        fetchProducts();
    }, []);

    const handleCustomerEmailSearch = async (customerEmail) => {
        //console.log("El email en handleCustomerEmailSearch es: ", customerEmail);
        try {
            const response = await getCustomerEmail(customerEmail, storeId);
            //console.log("F: getCustomerEmail es:", response);
            const found = response.customerList;
            //console.log("F: el found es:", found);
            if (found) {
                toast.success('Customer Found');
                //console.log("El cliente encontrdo es:", found)
                found.map((cust) => (
                    setCustomer({
                        _id: cust._id,
                        email: cust.email,
                        name: cust.name || '',
                        lastName: cust.lastName || '',
                        phone: cust.phone || '',
                        country: cust.country || '',
                        languages: cust.languages || [],
                        birthdate: cust.birthdate ? cust.birthdate.slice(0, 10) : '',
                        nationalId: cust.nationalId || '',
                        diet: cust.diet || '',
                        emergencyContactName: cust.emergencyContact?.emergencyContactName || '',
                        emergencyContactPhone: cust.emergencyContact?.emergencyContactPhone || '',
                        divingCertificates: cust.divingCertificates || [],
                    }
                    )));
                setCustomService((prev) => ({
                    ...prev,
                    customerEmail: found[0].email,
                }));
                setIsNew(false);
                setIsCustomerModalOpen(false);
                const auxExpList = await getValidExperienceByEmail(found[0].email, storeId)
                //console.log("Lista de experiencias", auxExpList)
                if (auxExpList.experienceList.length > 0) {
                    //console.log("Entre al if de asignar experiencia")
                    setExistingExperiences(auxExpList.experienceList)
                }
            } else {
                toast.success('Customer not found, please create one');
                setCustomer({
                    _id: '',
                    email: customerEmail,
                    name: '',
                    lastName: '',
                    phone: '',
                    country: '',
                    languages: [],
                    birthdate: '',
                    nationalId: '',
                    diet: '',
                    emergencyContactName: '',
                    emergencyContactPhone: '',
                    divingCertificates: [],
                });
                setCustomService((prev) => ({ ...prev, customerEmail: customerEmail }));
                setIsNew(true);
                setIsCustomerModalOpen(true);
            }
            setIsCustomerFilled(true);
        } catch (err) {
            toast.success('Customer not found, please create one');
            setCustomer({
                _id: '',
                email: customerEmail,
                name: '',
                lastName: '',
                phone: '',
                country: '',
                languages: [],
                birthdate: '',
                nationalId: '',
                diet: '',
                emergencyContactName: '',
                emergencyContactPhone: '',
                divingCertificates: [],
            });
            setIsCustomerModalOpen(true);
        }
    };

    const handleSaveClient = async (e) => {
        try {
            setLoading(true)
            //console.log("F: El cliente es:", customer);
            const customerPayload = {
                _id: customer._id,
                email: customer.email,
                name: customer.name,
                phone: customer.phone,
                country: customer.country,
                languages: customer.languages,
                birthdate: customer.birthdate,
                nationalId: customer.nationalId,
                diet: customer.diet,
                emergencyContact: {
                    emergencyContactName: customer.emergencyContactName,
                    emergencyContactPhone: customer.emergencyContactPhone,
                },
                divingCertificates: customer.divingCertificates,
                storeId: storeId,
            };
            console.log("F: El cliente a CREAR o EDITAR es:", customerPayload);
            if (customerPayload._id) {
                // El cliente ya existe: actualizar
                //console.log("F: entré a modificar");
                await updateCustomer(customerPayload.email, customerPayload); // Asegúrate de tener esta función
                toast.success("Customer updated successfully");
            } else {
                // Crear nuevo cliente
                await createCustomer(customerPayload);
                toast.success("Customer created successfully");
            }
            setIsCustomerModalOpen(false);
            setIsNew(false);
        } catch (error) {
            toast.error('Error creating a Customer');
        } finally {
            setLoading(false)
        }

    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (selectedType === "Customer" && !isCustomerFilled) {
            toast.error("Search the customer email is mandatory");
            return;
        }
        if (customServiceList.length === 0) {
            toast.error("At least 1 service must be created");
            return;
        }
        setLoading(true);
        //console.log("En  handleSubmit: ", customServiceList);
        try {
            //console.log("selectedExperience es: ", selectedExperience)
            let actualServiceList = []
            if (selectedExperience?.experience?.serviceList?.length > 0) {
                //console.log("Entre a IF selectedExperience");
                actualServiceList = [...selectedExperience.experience.serviceList];
            }
            //console.log("El listado actual de servicios es: ", actualServiceList)
            //console.log("La experiencia seleccionada es: ", selectedExperience)
            let lastDate = new Date();
            for (const auxService of customServiceList) {
                //console.log("El service es:", auxService);
                const servicePayload = {
                    name: auxService.name,
                    productId: auxService.productId,
                    customerEmail: customer.email || '',
                    storeId: storeId,
                    userEmail: user.email,
                    dateIn: auxService.dateIn,
                    dateOut: auxService.dateOut,
                    type: auxService.type,
                    isPaid: auxService.isPaid,
                    staffEmail: auxService.staffEmail
                }
                if (lastDate < auxService.dateOut) {
                    lastDate = auxService.dateOut
                }
                //console.log("El servicePayload es:", servicePayload);
                const service = await createService(servicePayload);
                //console.log("Respuesta de createService es:", service);
                actualServiceList.push(service._id)

            }
            //console.log("El listado actualizado de servicios es: ", actualServiceList)
            if (selectedExperience?.experience?.serviceList?.length > 0) {
                let payload = {}
                if (selectedExperience?.experience?.dateOut < lastDate) {
                    payload = {
                        dateOut: lastDate,
                        serviceList: actualServiceList,
                    }

                } else {
                    payload = {
                        serviceList: actualServiceList,
                    }
                }
                await updateExperience(selectedExperience.value, payload)
            }
            window.scrollTo({ top: 0, behavior: 'smooth' });
            handleResetCustomService();
            toast.success("Services created");
        } catch (error) {
            console.log("Error en handleSubmit:", error);
            toast.error("Error creating Services")
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        if (customService.productName && nameAutoGenerated) {
            setCustomService(prev => ({
                ...prev,
                name: `${customService.productName} - ${customer.name || ""} ${customer.lastName || ""}`
            }));
        }
    }, [customService.productName, nameAutoGenerated]);

    useEffect(() => {
        //console.log("El listado de servicios es: ", customServiceList)
    }, [customServiceList]);

    const handleResetCustomService = () => {
        setCustomService({});
        setCustomServiceList([]);
    };

    const handleDeleteCustomService = (indexToDelete) => {
        setCustomServiceList(prevList => prevList.filter((_, i) => i !== indexToDelete));
    };

    const handleChange = (selected) => {
        if (selected) {
            setSelectedExperience(selected);
        }
    };

    const options = existingExperiences.map(experience => ({
        value: experience._id,
        label: `${experience.name}`,
        experience,
    }));

    return (
        <>
            {
                loading && (
                    <LoadingSpinner />
                )
            }
            <div className="flex flex-col min-h-screen w-full bg-[#18394C] text-slate-800 px-4 py-6 sm:px-8 sm:py-10">
                <motion.div
                    initial={{ opacity: 0, scale: 2 }}
                    animate={{ opacity: 1, scale: 1 }}
                    exit={{ opacity: 0, scale: 0.9 }}
                    transition={{ duration: 0.5 }}
                    className="
                                flex flex-col
                                bg-sky-50 backdrop-filter backdrop-blur-lg
                                rounded-2xl shadow-2xl  overflow-hidden
                                min-h-[calc(100vh-5rem)]
                                w-full max-w-7xl
                                px-4 py-6
                                mt-4
                                mx-auto
                            "
                >
                    <h1 className="text-3xl font-bold mt-6 mb-6 text-center text-slate-800 bg-clip-text">Create Service</h1>
                    <form onSubmit={handleSubmit} className="space-y-4 p-4 rounded-2xl bg-sky-50 w-full">
                        <fieldset className=" p-4 rounded-2xl bg-white">
                            <legend className="font-semibold text-2xl">Service Data</legend>
                            <div>
                                <div className="flex flex-row sm:flex-row items-center gap-2 box-border">
                                    <input
                                        ref={customerEmailRef}
                                        type="email"
                                        name="customerEmail"
                                        value={customService.customerEmail}
                                        onChange={(e) =>
                                            setCustomService((prev) => ({
                                                ...prev,
                                                customerEmail: e.target.value,
                                            }))
                                        }
                                        onKeyDown={(e) => {
                                            if (e.key === 'Enter') {
                                                e.preventDefault();
                                                handleCustomerEmailSearch(customerEmailRef.current.value);
                                            }
                                        }}
                                        className="w-full border py-2 rounded bg-white text-slate-900"
                                        placeholder="Enter customer email"
                                    />
                                    <button
                                        type="button"
                                        onClick={() => handleCustomerEmailSearch(customerEmailRef.current.value)}
                                        className="bg-[#118290] hover:bg-[#0d6c77] text-cyan-50 px-3 py-1 rounded"
                                    >
                                        <Search />
                                    </button>

                                    {!isNew && (
                                        <button
                                            type="button"
                                            variant="outline"
                                            className="bg-slate-600 hover:bg-slate-700 text-cyan-50 px-3 py-1 rounded"
                                            onClick={() => setIsCustomerModalOpen(true)}
                                        >
                                            <Contact2 />
                                        </button>
                                    )}
                                    {isCustomerModalOpen && (
                                        <CustomerDetails
                                            isOpen={isCustomerModalOpen}
                                            onClose={() => setIsCustomerModalOpen(false)}
                                            customer={customer}
                                            setCustomer={setCustomer}
                                            onSave={handleSaveClient}
                                        />
                                    )}
                                </div>
                                {existingExperiences?.length > 0 && (
                                    <div className='mt-1'>
                                        <p className='font-semibold'>Assign service(s) to customer experience:</p>
                                        <Select
                                            options={options}
                                            value={options.find(opt => opt.value === selectedExperience.value) || null} // ← aquí lo haces controlado
                                            onChange={handleChange}
                                            placeholder="Select or search a experience..."
                                            className="text-slate-900"
                                            classNamePrefix="react-select"
                                            styles={{
                                                control: (base) => ({
                                                    ...base,
                                                    borderColor: '#d1d5db', // Tailwind border-gray-300
                                                    padding: '2px',
                                                    fontSize: '0.875rem', // text-sm
                                                }),
                                                menu: (base) => ({
                                                    ...base,
                                                    zIndex: 50,
                                                }),
                                                option: (provided, state) => ({
                                                    ...provided,
                                                    backgroundColor: state.isFocused ? "#3BA0AC" : "white",
                                                    color: "#1e293b", // slate-900
                                                }),
                                            }}
                                        />
                                    </div>
                                )}
                            </div>
                            {/* Product Selection */}
                            <div className="mt-4">
                                <ProductSelect
                                    productList={productList}
                                    customService={customService}
                                    setCustomService={setCustomService}
                                    setNameAutoGenerated={setNameAutoGenerated}
                                />
                            </div>
                            <div className="mt-4">
                                <label className="block text-sm font-medium mt-5">Base Service Name:</label>
                                <input
                                    type="text"
                                    className={`w-full border border-gray-300  ${!customService.productId ? 'bg-gray-300' : 'bg-white'} text-slate-900 rounded px-3 py-2 mt-1`}
                                    value={customService.name || ''}
                                    disabled={!customService.productId}
                                    onChange={(e) => {
                                        setNameAutoGenerated(false); // Usuario está editando manualmente
                                        setCustomService({ ...customService, name: e.target.value });
                                    }}
                                />
                            </div>
                            {/* Staff && Type Selection */}
                            <div className="flex flex-col md:flex-row w-full mt-5 gap-4">
                                <div className="mt-2 w-full md:w-1/2">
                                    <label className="block text-sm font-medium">Staff Email:</label>
                                    <select
                                        className="w-full border border-gray-300 bg-white text-slate-900 rounded px-3 py-2"
                                        value={customService.staffEmail || ''}
                                        onChange={(e) => setCustomService({ ...customService, staffEmail: e.target.value })}
                                    >
                                        <option value="">Select a staff</option>
                                        {(staffList || []).map((staff) => (
                                            <option key={staff.email} value={staff.email}>
                                                {staff.name ? `${staff.name} (${staff.email})` : staff.email}
                                            </option>
                                        ))}
                                    </select>
                                </div>
                                <div className="w-full md:w-1/2 flex flex-col mt-2">
                                    <label className="text-sm font-medium text-left text-slate-800">Service Type:</label>

                                    <select
                                        name="type"
                                        className="w-full border border-gray-300 bg-white text-slate-900 rounded px-3 py-2"
                                        value={customService.type || ''}
                                        onChange={(e) => {
                                            setCustomService({ ...customService, type: e.target.value }),
                                                setSelectedType(e.target.value)
                                        }}
                                    >
                                        <option value="">Select a Type</option>
                                        {types.map((t) => (
                                            <option key={t.name} value={t.name}>
                                                {t.name}
                                            </option>
                                        ))}
                                    </select>

                                    {/* Conditional Toggle for "Customer" Type */}
                                    {customService.type === 'Customer' && (
                                        <div className="mt-2 flex items-center space-x-3">
                                            <span className="text-sm">Is the service paid?</span>
                                            <label className="relative inline-flex items-center cursor-pointer">
                                                <input
                                                    type="checkbox"
                                                    className="sr-only peer"
                                                    checked={customService.isPaid || false}
                                                    onChange={(e) => setCustomService({ ...customService, isPaid: e.target.checked })}
                                                />
                                                <div className="w-11 h-6 bg-gray-300 rounded-full peer peer-checked:bg-blue-600 transition-colors duration-200 peer-focus:ring-2 peer-focus:ring-blue-500" />
                                                <div className="absolute left-1 top-1 w-4 h-4 bg-white rounded-full transition-transform duration-200 transform peer-checked:translate-x-5" />
                                            </label>
                                        </div>
                                    )}
                                </div>
                            </div>
                            <div className="border rounded-2xl mt-5 bg-white p-4 box-border">
                                <div className="flex flex-col lg:flex-row gap-4">
                                    {/* DateTime Pickers */}
                                    <fieldset className="border rounded-2xl w-full lg:w-1/4 p-4 box-border">
                                        <legend className='ml-2 text-lg font-bold'>Dates & Cycle</legend>
                                        <div className="flex flex-col lg:flex-row gap-4 mt-2">
                                            <div className="pr-2">
                                                <label>Start Date & Time</label>
                                                <input type="datetime-local"
                                                    value={customService.dateIn || ''}
                                                    onChange={(e) => setCustomService({ ...customService, dateIn: e.target.value })}
                                                    className="w-full border px-2 py-1 rounded bg-white text-slate-900"
                                                />
                                            </div>
                                            <div className="pl-2">
                                                <label>End Date & Time</label>
                                                <input type="datetime-local"
                                                    value={customService.dateOut || ''}
                                                    onChange={(e) => setCustomService({ ...customService, dateOut: e.target.value })}
                                                    className="w-full border px-2 py-1 rounded bg-white text-slate-900"
                                                />
                                            </div>
                                        </div>

                                        {/* Toggle */}
                                        <div className='flex flex-row ml-2 mr-2'>
                                            <div className="mt-2 flex items-center w-1/2">
                                                <input
                                                    id="onePerDay"
                                                    type="checkbox"
                                                    checked={customService.onePerDay || false}
                                                    onChange={(e) => setCustomService({ ...customService, onePerDay: e.target.checked })}
                                                    className="mr-2"
                                                />
                                                <label htmlFor="onePerDay" className="text-sm">Create one service per day?</label>
                                            </div>
                                            <div className="ml-2 mt-2 flex items-center w-1/2">
                                                <input
                                                    id="perWeek"
                                                    type="checkbox"
                                                    checked={customService.perWeek || false}
                                                    onChange={(e) => setCustomService({ ...customService, perWeek: e.target.checked, repetitions: 1 })}
                                                    className="mr-2"
                                                />
                                                <label htmlFor="perWeek" className="text-sm">Same days next weeks?</label>
                                            </div>
                                        </div>

                                        {/* Repeat Cycle */}
                                        <div className="mt-2 ml-2 mr-2 mb-2">
                                            <label className="block text-sm font-medium">Cycle Repetitions:</label>
                                            <input
                                                type="number"
                                                min={0}
                                                value={customService.repetitions || 0}
                                                onChange={(e) => setCustomService({ ...customService, repetitions: parseInt(e.target.value, 10) })}
                                                className="w-full border px-2 py-1 rounded bg-white text-slate-900"
                                            />
                                        </div>
                                    </fieldset>

                                    <fieldset className="border rounded-2xl w-full lg:w-3/4 p-4 box-border">
                                        <legend className='ml-2 text-lg font-bold'>Services to create: {customServiceList.length}</legend>
                                        <div className='grid grid-cols-1 sm:grid-cols-2 gap-2 ml-2'>
                                            {(customServiceList || []).map((service, index) => (
                                                <div className='flex flex-row items-center justify-center border rounded-2xl mr-2 mb-2 bg-sky-50'>
                                                    <div className='ml-2 flex-1 text-left'>
                                                        <label>
                                                            {index + 1}.- {service.name} - {formatDateDisplay(service.dateIn)} to {formatDateDisplay(service.dateOut)}
                                                        </label>
                                                    </div>
                                                    <div className='mr-2'>
                                                        <Trash2
                                                            className='text-red-500 hover:text-red-900'
                                                            onClick={() => handleDeleteCustomService(index)}
                                                        />
                                                    </div>
                                                </div>
                                            ))}
                                        </div>
                                    </fieldset>
                                </div>
                                {/* Add Button */}
                                <div className="flex justify-center mt-6">
                                    <button
                                        className="mt-4 px-4 py-2 rounded bg-[#3BA0AC] hover:bg-[#6BBCC5] text-cyan-50"
                                        onClick={(e) => {
                                            e.preventDefault();
                                            try {
                                                const newServices = createCustomServices(customService);
                                                setCustomServiceList((prev) => [...prev, ...newServices]);
                                                setCustomService({});
                                            } catch (err) {
                                                alert(err.message);
                                            }
                                        }}
                                    >
                                        Add Service(s)
                                    </button>
                                    <button
                                        className="mt-4 px-4 py-2 ml-2 rounded bg-slate-600 hover:bg-slate-700 text-cyan-50"
                                        type='button'
                                        onClick={() => handleResetCustomService()}
                                    >
                                        Reset Service(s)
                                    </button>
                                </div>
                            </div>

                        </fieldset>
                        <div className="flex flex-row justify-center">
                            <button type="submit" className="mt-4 mb-4 px-4 py-2 rounded bg-[#118290] hover:bg-[#0d6c77] text-cyan-50" disabled={loading}>
                                {loading ? "Creating Services..." : "Create Services"}
                            </button>
                        </div>
                    </form>
                </motion.div>
            </div>
        </>
    );
}